"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-player";
exports.ids = ["vendor-chunks/react-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Player_exports = {};\n__export(Player_exports, {\n    default: ()=>Player\n});\nmodule.exports = __toCommonJS(Player_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nconst SEEK_ON_PLAY_EXPIRY = 5e3;\nclass Player extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"isReady\", false);\n        __publicField(this, \"isPlaying\", false);\n        // Track playing state internally to prevent bugs\n        __publicField(this, \"isLoading\", true);\n        // Use isLoading to prevent onPause when switching URL\n        __publicField(this, \"loadOnReady\", null);\n        __publicField(this, \"startOnPlay\", true);\n        __publicField(this, \"seekOnPlay\", null);\n        __publicField(this, \"onDurationCalled\", false);\n        __publicField(this, \"handlePlayerMount\", (player)=>{\n            if (this.player) {\n                this.progress();\n                return;\n            }\n            this.player = player;\n            this.player.load(this.props.url);\n            this.progress();\n        });\n        __publicField(this, \"getInternalPlayer\", (key)=>{\n            if (!this.player) return null;\n            return this.player[key];\n        });\n        __publicField(this, \"progress\", ()=>{\n            if (this.props.url && this.player && this.isReady) {\n                const playedSeconds = this.getCurrentTime() || 0;\n                const loadedSeconds = this.getSecondsLoaded();\n                const duration = this.getDuration();\n                if (duration) {\n                    const progress = {\n                        playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    }\n                    if (progress.playedSeconds !== this.prevPlayed || progress.loadedSeconds !== this.prevLoaded) {\n                        this.props.onProgress(progress);\n                    }\n                    this.prevPlayed = progress.playedSeconds;\n                    this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);\n        });\n        __publicField(this, \"handleReady\", ()=>{\n            if (!this.mounted) return;\n            this.isReady = true;\n            this.isLoading = false;\n            const { onReady, playing, volume, muted } = this.props;\n            onReady();\n            if (!muted && volume !== null) {\n                this.player.setVolume(volume);\n            }\n            if (this.loadOnReady) {\n                this.player.load(this.loadOnReady, true);\n                this.loadOnReady = null;\n            } else if (playing) {\n                this.player.play();\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePlay\", ()=>{\n            this.isPlaying = true;\n            this.isLoading = false;\n            const { onStart, onPlay, playbackRate } = this.props;\n            if (this.startOnPlay) {\n                if (this.player.setPlaybackRate && playbackRate !== 1) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                this.startOnPlay = false;\n            }\n            onPlay();\n            if (this.seekOnPlay) {\n                this.seekTo(this.seekOnPlay);\n                this.seekOnPlay = null;\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePause\", (e)=>{\n            this.isPlaying = false;\n            if (!this.isLoading) {\n                this.props.onPause(e);\n            }\n        });\n        __publicField(this, \"handleEnded\", ()=>{\n            const { activePlayer, loop, onEnded } = this.props;\n            if (activePlayer.loopOnEnded && loop) {\n                this.seekTo(0);\n            }\n            if (!loop) {\n                this.isPlaying = false;\n                onEnded();\n            }\n        });\n        __publicField(this, \"handleError\", (...args)=>{\n            this.isLoading = false;\n            this.props.onError(...args);\n        });\n        __publicField(this, \"handleDurationCheck\", ()=>{\n            clearTimeout(this.durationCheckTimeout);\n            const duration = this.getDuration();\n            if (duration) {\n                if (!this.onDurationCalled) {\n                    this.props.onDuration(duration);\n                    this.onDurationCalled = true;\n                }\n            } else {\n                this.durationCheckTimeout = setTimeout(this.handleDurationCheck, 100);\n            }\n        });\n        __publicField(this, \"handleLoaded\", ()=>{\n            this.isLoading = false;\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n    }\n    componentWillUnmount() {\n        clearTimeout(this.progressTimeout);\n        clearTimeout(this.durationCheckTimeout);\n        if (this.isReady && this.props.stopOnUnmount) {\n            this.player.stop();\n            if (this.player.disablePIP) {\n                this.player.disablePIP();\n            }\n        }\n        this.mounted = false;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.player) {\n            return;\n        }\n        const { url, playing, volume, muted, playbackRate, pip, loop, activePlayer, disableDeferredLoading } = this.props;\n        if (!(0, import_react_fast_compare.default)(prevProps.url, url)) {\n            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, import_utils.isMediaStream)(url)) {\n                console.warn(`ReactPlayer: the attempt to load ${url} is being deferred until the player has loaded`);\n                this.loadOnReady = url;\n                return;\n            }\n            this.isLoading = true;\n            this.startOnPlay = true;\n            this.onDurationCalled = false;\n            this.player.load(url, this.isReady);\n        }\n        if (!prevProps.playing && playing && !this.isPlaying) {\n            this.player.play();\n        }\n        if (prevProps.playing && !playing && this.isPlaying) {\n            this.player.pause();\n        }\n        if (!prevProps.pip && pip && this.player.enablePIP) {\n            this.player.enablePIP();\n        }\n        if (prevProps.pip && !pip && this.player.disablePIP) {\n            this.player.disablePIP();\n        }\n        if (prevProps.volume !== volume && volume !== null) {\n            this.player.setVolume(volume);\n        }\n        if (prevProps.muted !== muted) {\n            if (muted) {\n                this.player.mute();\n            } else {\n                this.player.unmute();\n                if (volume !== null) {\n                    setTimeout(()=>this.player.setVolume(volume));\n                }\n            }\n        }\n        if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n            this.player.setPlaybackRate(playbackRate);\n        }\n        if (prevProps.loop !== loop && this.player.setLoop) {\n            this.player.setLoop(loop);\n        }\n    }\n    getDuration() {\n        if (!this.isReady) return null;\n        return this.player.getDuration();\n    }\n    getCurrentTime() {\n        if (!this.isReady) return null;\n        return this.player.getCurrentTime();\n    }\n    getSecondsLoaded() {\n        if (!this.isReady) return null;\n        return this.player.getSecondsLoaded();\n    }\n    seekTo(amount, type, keepPlaying) {\n        if (!this.isReady) {\n            if (amount !== 0) {\n                this.seekOnPlay = amount;\n                setTimeout(()=>{\n                    this.seekOnPlay = null;\n                }, SEEK_ON_PLAY_EXPIRY);\n            }\n            return;\n        }\n        const isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n        if (isFraction) {\n            const duration = this.player.getDuration();\n            if (!duration) {\n                console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                return;\n            }\n            this.player.seekTo(duration * amount, keepPlaying);\n            return;\n        }\n        this.player.seekTo(amount, keepPlaying);\n    }\n    render() {\n        const Player2 = this.props.activePlayer;\n        if (!Player2) {\n            return null;\n        }\n        return /* @__PURE__ */ import_react.default.createElement(Player2, {\n            ...this.props,\n            onMount: this.handlePlayerMount,\n            onReady: this.handleReady,\n            onPlay: this.handlePlay,\n            onPause: this.handlePause,\n            onEnded: this.handleEnded,\n            onLoaded: this.handleLoaded,\n            onError: this.handleError\n        });\n    }\n}\n__publicField(Player, \"displayName\", \"Player\");\n__publicField(Player, \"propTypes\", import_props.propTypes);\n__publicField(Player, \"defaultProps\", import_props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Preview_exports = {};\n__export(Preview_exports, {\n    default: ()=>Preview\n});\nmodule.exports = __toCommonJS(Preview_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst ICON_SIZE = \"64px\";\nconst cache = {};\nclass Preview extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"state\", {\n            image: null\n        });\n        __publicField(this, \"handleKeyPress\", (e)=>{\n            if (e.key === \"Enter\" || e.key === \" \") {\n                this.props.onClick();\n            }\n        });\n    }\n    componentDidMount() {\n        this.mounted = true;\n        this.fetchImage(this.props);\n    }\n    componentDidUpdate(prevProps) {\n        const { url, light } = this.props;\n        if (prevProps.url !== url || prevProps.light !== light) {\n            this.fetchImage(this.props);\n        }\n    }\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n    fetchImage({ url, light, oEmbedUrl }) {\n        if (import_react.default.isValidElement(light)) {\n            return;\n        }\n        if (typeof light === \"string\") {\n            this.setState({\n                image: light\n            });\n            return;\n        }\n        if (cache[url]) {\n            this.setState({\n                image: cache[url]\n            });\n            return;\n        }\n        this.setState({\n            image: null\n        });\n        return window.fetch(oEmbedUrl.replace(\"{url}\", url)).then((response)=>response.json()).then((data)=>{\n            if (data.thumbnail_url && this.mounted) {\n                const image = data.thumbnail_url.replace(\"height=100\", \"height=480\").replace(\"-d_295x166\", \"-d_640\");\n                this.setState({\n                    image\n                });\n                cache[url] = image;\n            }\n        });\n    }\n    render() {\n        const { light, onClick, playIcon, previewTabIndex, previewAriaLabel } = this.props;\n        const { image } = this.state;\n        const isElement = import_react.default.isValidElement(light);\n        const flexCenter = {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        };\n        const styles = {\n            preview: {\n                width: \"100%\",\n                height: \"100%\",\n                backgroundImage: image && !isElement ? `url(${image})` : void 0,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                cursor: \"pointer\",\n                ...flexCenter\n            },\n            shadow: {\n                background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n                borderRadius: ICON_SIZE,\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                position: isElement ? \"absolute\" : void 0,\n                ...flexCenter\n            },\n            playIcon: {\n                borderStyle: \"solid\",\n                borderWidth: \"16px 0 16px 26px\",\n                borderColor: \"transparent transparent transparent white\",\n                marginLeft: \"7px\"\n            }\n        };\n        const defaultPlayIcon = /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.shadow,\n            className: \"react-player__shadow\"\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.playIcon,\n            className: \"react-player__play-icon\"\n        }));\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style: styles.preview,\n            className: \"react-player__preview\",\n            onClick,\n            tabIndex: previewTabIndex,\n            onKeyPress: this.handleKeyPress,\n            ...previewAriaLabel ? {\n                \"aria-label\": previewAriaLabel\n            } : {}\n        }, isElement ? light : null, playIcon || defaultPlayIcon);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9QcmV2aWV3LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxPQUFPQyxNQUFNO0FBQzVCLElBQUlDLFlBQVlGLE9BQU9HLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CSixPQUFPSyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CTixPQUFPTyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZVIsT0FBT1MsY0FBYztBQUN4QyxJQUFJQyxlQUFlVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1aLFVBQVVZLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZwQixVQUFVbUIsUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRU4sWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSVEsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJWixPQUFPVCxrQkFBa0JxQixNQUNoQyxJQUFJLENBQUNqQixhQUFhb0IsSUFBSSxDQUFDSixJQUFJWCxRQUFRQSxRQUFRYSxRQUN6QzFCLFVBQVV3QixJQUFJWCxLQUFLO1lBQUVTLEtBQUssSUFBTUcsSUFBSSxDQUFDWixJQUFJO1lBQUVFLFlBQVksQ0FBRVksQ0FBQUEsT0FBT3pCLGlCQUFpQnVCLE1BQU1aLElBQUcsS0FBTWMsS0FBS1osVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT1M7QUFDVDtBQUNBLElBQUlLLFVBQVUsQ0FBQ0MsS0FB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QUN4USxPQUFPLGFBQWEsR0FBRzNELGFBQWFKLE9BQU8sQ0FBQzZELGFBQWEsQ0FDdkQsT0FDQTtZQUNFQyxPQUFPbEIsT0FBT0MsT0FBTztZQUNyQmtCLFdBQVc7WUFDWGpEO1lBQ0FrRCxVQUFVNUI7WUFDVjZCLFlBQVksSUFBSSxDQUFDQyxjQUFjO1lBQy9CLEdBQUc3QixtQkFBbUI7Z0JBQUUsY0FBY0E7WUFBaUIsSUFBSSxDQUFDLENBQUM7UUFDL0QsR0FDQUUsWUFBWWxCLFFBQVEsTUFDcEJjLFlBQVl5QjtJQUVoQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyZWFtdmliZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL1ByZXZpZXcuanM/NmYwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgUHJldmlld19leHBvcnRzID0ge307XG5fX2V4cG9ydChQcmV2aWV3X2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gUHJldmlld1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhQcmV2aWV3X2V4cG9ydHMpO1xudmFyIGltcG9ydF9yZWFjdCA9IF9fdG9FU00ocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IElDT05fU0laRSA9IFwiNjRweFwiO1xuY29uc3QgY2FjaGUgPSB7fTtcbmNsYXNzIFByZXZpZXcgZXh0ZW5kcyBpbXBvcnRfcmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibW91bnRlZFwiLCBmYWxzZSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN0YXRlXCIsIHtcbiAgICAgIGltYWdlOiBudWxsXG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImhhbmRsZUtleVByZXNzXCIsIChlKSA9PiB7XG4gICAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIiB8fCBlLmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZldGNoSW1hZ2UodGhpcy5wcm9wcyk7XG4gIH1cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGNvbnN0IHsgdXJsLCBsaWdodCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAocHJldlByb3BzLnVybCAhPT0gdXJsIHx8IHByZXZQcm9wcy5saWdodCAhPT0gbGlnaHQpIHtcbiAgICAgIHRoaXMuZmV0Y2hJbWFnZSh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH1cbiAgZmV0Y2hJbWFnZSh7IHVybCwgbGlnaHQsIG9FbWJlZFVybCB9KSB7XG4gICAgaWYgKGltcG9ydF9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGxpZ2h0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxpZ2h0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2U6IGxpZ2h0IH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVbdXJsXSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGltYWdlOiBjYWNoZVt1cmxdIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2U6IG51bGwgfSk7XG4gICAgcmV0dXJuIHdpbmRvdy5mZXRjaChvRW1iZWRVcmwucmVwbGFjZShcInt1cmx9XCIsIHVybCkpLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGlmIChkYXRhLnRodW1ibmFpbF91cmwgJiYgdGhpcy5tb3VudGVkKSB7XG4gICAgICAgIGNvbnN0IGltYWdlID0gZGF0YS50aHVtYm5haWxfdXJsLnJlcGxhY2UoXCJoZWlnaHQ9MTAwXCIsIFwiaGVpZ2h0PTQ4MFwiKS5yZXBsYWNlKFwiLWRfMjk1eDE2NlwiLCBcIi1kXzY0MFwiKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGltYWdlIH0pO1xuICAgICAgICBjYWNoZVt1cmxdID0gaW1hZ2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbGlnaHQsIG9uQ2xpY2ssIHBsYXlJY29uLCBwcmV2aWV3VGFiSW5kZXgsIHByZXZpZXdBcmlhTGFiZWwgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpbWFnZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc0VsZW1lbnQgPSBpbXBvcnRfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChsaWdodCk7XG4gICAgY29uc3QgZmxleENlbnRlciA9IHtcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiXG4gICAgfTtcbiAgICBjb25zdCBzdHlsZXMgPSB7XG4gICAgICBwcmV2aWV3OiB7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiBpbWFnZSAmJiAhaXNFbGVtZW50ID8gYHVybCgke2ltYWdlfSlgIDogdm9pZCAwLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiY2VudGVyXCIsXG4gICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgIC4uLmZsZXhDZW50ZXJcbiAgICAgIH0sXG4gICAgICBzaGFkb3c6IHtcbiAgICAgICAgYmFja2dyb3VuZDogXCJyYWRpYWwtZ3JhZGllbnQocmdiKDAsIDAsIDAsIDAuMyksIHJnYmEoMCwgMCwgMCwgMCkgNjAlKVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IElDT05fU0laRSxcbiAgICAgICAgd2lkdGg6IElDT05fU0laRSxcbiAgICAgICAgaGVpZ2h0OiBJQ09OX1NJWkUsXG4gICAgICAgIHBvc2l0aW9uOiBpc0VsZW1lbnQgPyBcImFic29sdXRlXCIgOiB2b2lkIDAsXG4gICAgICAgIC4uLmZsZXhDZW50ZXJcbiAgICAgIH0sXG4gICAgICBwbGF5SWNvbjoge1xuICAgICAgICBib3JkZXJTdHlsZTogXCJzb2xpZFwiLFxuICAgICAgICBib3JkZXJXaWR0aDogXCIxNnB4IDAgMTZweCAyNnB4XCIsXG4gICAgICAgIGJvcmRlckNvbG9yOiBcInRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHdoaXRlXCIsXG4gICAgICAgIG1hcmdpbkxlZnQ6IFwiN3B4XCJcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGRlZmF1bHRQbGF5SWNvbiA9IC8qIEBfX1BVUkVfXyAqLyBpbXBvcnRfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHN0eWxlcy5zaGFkb3csIGNsYXNzTmFtZTogXCJyZWFjdC1wbGF5ZXJfX3NoYWRvd1wiIH0sIC8qIEBfX1BVUkVfXyAqLyBpbXBvcnRfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHN0eWxlcy5wbGF5SWNvbiwgY2xhc3NOYW1lOiBcInJlYWN0LXBsYXllcl9fcGxheS1pY29uXCIgfSkpO1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMucHJldmlldyxcbiAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXBsYXllcl9fcHJldmlld1wiLFxuICAgICAgICBvbkNsaWNrLFxuICAgICAgICB0YWJJbmRleDogcHJldmlld1RhYkluZGV4LFxuICAgICAgICBvbktleVByZXNzOiB0aGlzLmhhbmRsZUtleVByZXNzLFxuICAgICAgICAuLi5wcmV2aWV3QXJpYUxhYmVsID8geyBcImFyaWEtbGFiZWxcIjogcHJldmlld0FyaWFMYWJlbCB9IDoge31cbiAgICAgIH0sXG4gICAgICBpc0VsZW1lbnQgPyBsaWdodCA6IG51bGwsXG4gICAgICBwbGF5SWNvbiB8fCBkZWZhdWx0UGxheUljb25cbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOlsiX19jcmVhdGUiLCJPYmplY3QiLCJjcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJnZXQiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJjYWxsIiwiX190b0VTTSIsIm1vZCIsImlzTm9kZU1vZGUiLCJfX2VzTW9kdWxlIiwiX190b0NvbW1vbkpTIiwiX19wdWJsaWNGaWVsZCIsIlByZXZpZXdfZXhwb3J0cyIsImRlZmF1bHQiLCJQcmV2aWV3IiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJJQ09OX1NJWkUiLCJjYWNoZSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiaW1hZ2UiLCJlIiwicHJvcHMiLCJvbkNsaWNrIiwiY29tcG9uZW50RGlkTW91bnQiLCJtb3VudGVkIiwiZmV0Y2hJbWFnZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsInVybCIsImxpZ2h0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJvRW1iZWRVcmwiLCJpc1ZhbGlkRWxlbWVudCIsInNldFN0YXRlIiwid2luZG93IiwiZmV0Y2giLCJyZXBsYWNlIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJ0aHVtYm5haWxfdXJsIiwicmVuZGVyIiwicGxheUljb24iLCJwcmV2aWV3VGFiSW5kZXgiLCJwcmV2aWV3QXJpYUxhYmVsIiwic3RhdGUiLCJpc0VsZW1lbnQiLCJmbGV4Q2VudGVyIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInN0eWxlcyIsInByZXZpZXciLCJ3aWR0aCIsImhlaWdodCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRTaXplIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiY3Vyc29yIiwic2hhZG93IiwiYmFja2dyb3VuZCIsImJvcmRlclJhZGl1cyIsInBvc2l0aW9uIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwibWFyZ2luTGVmdCIsImRlZmF1bHRQbGF5SWNvbiIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsImNsYXNzTmFtZSIsInRhYkluZGV4Iiwib25LZXlQcmVzcyIsImhhbmRsZUtleVByZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Preview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar ReactPlayer_exports = {};\n__export(ReactPlayer_exports, {\n    createReactPlayer: ()=>createReactPlayer\n});\nmodule.exports = __toCommonJS(ReactPlayer_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nvar import_memoize_one = __toESM(__webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_Player = __toESM(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nconst Preview = (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerPreview */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Preview */ \"(ssr)/./node_modules/react-player/lib/Preview.js\", 23)));\nconst IS_BROWSER =  false && 0;\nconst IS_GLOBAL = typeof global !== \"undefined\" && global.window && global.window.document;\nconst SUPPORTED_PROPS = Object.keys(import_props.propTypes);\nconst UniversalSuspense = IS_BROWSER || IS_GLOBAL ? import_react.Suspense : ()=>null;\nconst customPlayers = [];\nconst createReactPlayer = (players, fallback)=>{\n    var _a;\n    return _a = class extends import_react.Component {\n        constructor(){\n            super(...arguments);\n            __publicField(this, \"state\", {\n                showPreview: !!this.props.light\n            });\n            // Use references, as refs is used by React\n            __publicField(this, \"references\", {\n                wrapper: (wrapper)=>{\n                    this.wrapper = wrapper;\n                },\n                player: (player)=>{\n                    this.player = player;\n                }\n            });\n            __publicField(this, \"handleClickPreview\", (e)=>{\n                this.setState({\n                    showPreview: false\n                });\n                this.props.onClickPreview(e);\n            });\n            __publicField(this, \"showPreview\", ()=>{\n                this.setState({\n                    showPreview: true\n                });\n            });\n            __publicField(this, \"getDuration\", ()=>{\n                if (!this.player) return null;\n                return this.player.getDuration();\n            });\n            __publicField(this, \"getCurrentTime\", ()=>{\n                if (!this.player) return null;\n                return this.player.getCurrentTime();\n            });\n            __publicField(this, \"getSecondsLoaded\", ()=>{\n                if (!this.player) return null;\n                return this.player.getSecondsLoaded();\n            });\n            __publicField(this, \"getInternalPlayer\", (key = \"player\")=>{\n                if (!this.player) return null;\n                return this.player.getInternalPlayer(key);\n            });\n            __publicField(this, \"seekTo\", (fraction, type, keepPlaying)=>{\n                if (!this.player) return null;\n                this.player.seekTo(fraction, type, keepPlaying);\n            });\n            __publicField(this, \"handleReady\", ()=>{\n                this.props.onReady(this);\n            });\n            __publicField(this, \"getActivePlayer\", (0, import_memoize_one.default)((url)=>{\n                for (const player of [\n                    ...customPlayers,\n                    ...players\n                ]){\n                    if (player.canPlay(url)) {\n                        return player;\n                    }\n                }\n                if (fallback) {\n                    return fallback;\n                }\n                return null;\n            }));\n            __publicField(this, \"getConfig\", (0, import_memoize_one.default)((url, key)=>{\n                const { config } = this.props;\n                return import_deepmerge.default.all([\n                    import_props.defaultProps.config,\n                    import_props.defaultProps.config[key] || {},\n                    config,\n                    config[key] || {}\n                ]);\n            }));\n            __publicField(this, \"getAttributes\", (0, import_memoize_one.default)((url)=>{\n                return (0, import_utils.omit)(this.props, SUPPORTED_PROPS);\n            }));\n            __publicField(this, \"renderActivePlayer\", (url)=>{\n                if (!url) return null;\n                const player = this.getActivePlayer(url);\n                if (!player) return null;\n                const config = this.getConfig(url, player.key);\n                return /* @__PURE__ */ import_react.default.createElement(import_Player.default, {\n                    ...this.props,\n                    key: player.key,\n                    ref: this.references.player,\n                    config,\n                    activePlayer: player.lazyPlayer || player,\n                    onReady: this.handleReady\n                });\n            });\n        }\n        shouldComponentUpdate(nextProps, nextState) {\n            return !(0, import_react_fast_compare.default)(this.props, nextProps) || !(0, import_react_fast_compare.default)(this.state, nextState);\n        }\n        componentDidUpdate(prevProps) {\n            const { light } = this.props;\n            if (!prevProps.light && light) {\n                this.setState({\n                    showPreview: true\n                });\n            }\n            if (prevProps.light && !light) {\n                this.setState({\n                    showPreview: false\n                });\n            }\n        }\n        renderPreview(url) {\n            if (!url) return null;\n            const { light, playIcon, previewTabIndex, oEmbedUrl, previewAriaLabel } = this.props;\n            return /* @__PURE__ */ import_react.default.createElement(Preview, {\n                url,\n                light,\n                playIcon,\n                previewTabIndex,\n                previewAriaLabel,\n                oEmbedUrl,\n                onClick: this.handleClickPreview\n            });\n        }\n        render() {\n            const { url, style, width, height, fallback: fallback2, wrapper: Wrapper } = this.props;\n            const { showPreview } = this.state;\n            const attributes = this.getAttributes(url);\n            const wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : void 0;\n            return /* @__PURE__ */ import_react.default.createElement(Wrapper, {\n                ref: wrapperRef,\n                style: {\n                    ...style,\n                    width,\n                    height\n                },\n                ...attributes\n            }, /* @__PURE__ */ import_react.default.createElement(UniversalSuspense, {\n                fallback: fallback2\n            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n        }\n    }, __publicField(_a, \"displayName\", \"ReactPlayer\"), __publicField(_a, \"propTypes\", import_props.propTypes), __publicField(_a, \"defaultProps\", import_props.defaultProps), __publicField(_a, \"addCustomPlayer\", (player)=>{\n        customPlayers.push(player);\n    }), __publicField(_a, \"removeCustomPlayers\", ()=>{\n        customPlayers.length = 0;\n    }), __publicField(_a, \"canPlay\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canPlay(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), __publicField(_a, \"canEnablePIP\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canEnablePIP && Player2.canEnablePIP(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _a;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/ReactPlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar src_exports = {};\n__export(src_exports, {\n    default: ()=>src_default\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_players = __toESM(__webpack_require__(/*! ./players */ \"(ssr)/./node_modules/react-player/lib/players/index.js\"));\nvar import_ReactPlayer = __webpack_require__(/*! ./ReactPlayer */ \"(ssr)/./node_modules/react-player/lib/ReactPlayer.js\");\nconst fallback = import_players.default[import_players.default.length - 1];\nvar src_default = (0, import_ReactPlayer.createReactPlayer)(import_players.default, fallback);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsV0FBV0MsT0FBT0MsTUFBTTtBQUM1QixJQUFJQyxZQUFZRixPQUFPRyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkosT0FBT0ssd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQk4sT0FBT08sbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVSLE9BQU9TLGNBQWM7QUFDeEMsSUFBSUMsZUFBZVYsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFdBQVcsQ0FBQ0MsUUFBUUM7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmYixVQUFVWSxRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9sQixrQkFBa0JlLE1BQ2hDLElBQUksQ0FBQ1gsYUFBYWUsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3BCLFVBQVVrQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT25CLGlCQUFpQmlCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLFVBQVUsQ0FBQ0MsS0FBS0MsWUFBWWQsU0FBWUEsQ0FBQUEsU0FBU2EsT0FBTyxPQUFPNUIsU0FBU1MsYUFBYW1CLFFBQVEsQ0FBQyxHQUFHUixZQUNuRyxzRUFBc0U7SUFDdEUsaUVBQWlFO0lBQ2pFLHNFQUFzRTtJQUN0RSxxRUFBcUU7SUFDckVTLGNBQWMsQ0FBQ0QsT0FBTyxDQUFDQSxJQUFJRSxVQUFVLEdBQUczQixVQUFVWSxRQUFRLFdBQVc7UUFBRWdCLE9BQU9IO1FBQUtULFlBQVk7SUFBSyxLQUFLSixRQUN6R2EsSUFDRjtBQUNBLElBQUlJLGVBQWUsQ0FBQ0osTUFBUVIsWUFBWWpCLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRTRCLE9BQU87SUFBSyxJQUFJSDtBQUN0RixJQUFJSyxjQUFjLENBQUM7QUFDbkJuQixTQUFTbUIsYUFBYTtJQUNwQkMsU0FBUyxJQUFNQztBQUNqQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFDO0FBQzlCLElBQUlLLGlCQUFpQlgsUUFBUVksbUJBQU9BLENBQUMseUVBQVc7QUFDaEQsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQywyRUFBZTtBQUNoRCxNQUFNRSxXQUFXSCxlQUFlSixPQUFPLENBQUNJLGVBQWVKLE9BQU8sQ0FBQ1EsTUFBTSxHQUFHLEVBQUU7QUFDMUUsSUFBSVAsY0FBYyxDQUFDLEdBQUdLLG1CQUFtQkcsaUJBQWlCLEVBQUVMLGVBQWVKLE9BQU8sRUFBRU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW12aWJlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvaW5kZXguanM/MWI5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBkZWZhdWx0OiAoKSA9PiBzcmNfZGVmYXVsdFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG52YXIgaW1wb3J0X3BsYXllcnMgPSBfX3RvRVNNKHJlcXVpcmUoXCIuL3BsYXllcnNcIikpO1xudmFyIGltcG9ydF9SZWFjdFBsYXllciA9IHJlcXVpcmUoXCIuL1JlYWN0UGxheWVyXCIpO1xuY29uc3QgZmFsbGJhY2sgPSBpbXBvcnRfcGxheWVycy5kZWZhdWx0W2ltcG9ydF9wbGF5ZXJzLmRlZmF1bHQubGVuZ3RoIC0gMV07XG52YXIgc3JjX2RlZmF1bHQgPSAoMCwgaW1wb3J0X1JlYWN0UGxheWVyLmNyZWF0ZVJlYWN0UGxheWVyKShpbXBvcnRfcGxheWVycy5kZWZhdWx0LCBmYWxsYmFjayk7XG4iXSwibmFtZXMiOlsiX19jcmVhdGUiLCJPYmplY3QiLCJjcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvRVNNIiwibW9kIiwiaXNOb2RlTW9kZSIsIl9fZXNNb2R1bGUiLCJ2YWx1ZSIsIl9fdG9Db21tb25KUyIsInNyY19leHBvcnRzIiwiZGVmYXVsdCIsInNyY19kZWZhdWx0IiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9wbGF5ZXJzIiwicmVxdWlyZSIsImltcG9ydF9SZWFjdFBsYXllciIsImZhbGxiYWNrIiwibGVuZ3RoIiwiY3JlYXRlUmVhY3RQbGF5ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/patterns.js":
/*!***************************************************!*\
  !*** ./node_modules/react-player/lib/patterns.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar patterns_exports = {};\n__export(patterns_exports, {\n    AUDIO_EXTENSIONS: ()=>AUDIO_EXTENSIONS,\n    DASH_EXTENSIONS: ()=>DASH_EXTENSIONS,\n    FLV_EXTENSIONS: ()=>FLV_EXTENSIONS,\n    HLS_EXTENSIONS: ()=>HLS_EXTENSIONS,\n    MATCH_URL_DAILYMOTION: ()=>MATCH_URL_DAILYMOTION,\n    MATCH_URL_FACEBOOK: ()=>MATCH_URL_FACEBOOK,\n    MATCH_URL_FACEBOOK_WATCH: ()=>MATCH_URL_FACEBOOK_WATCH,\n    MATCH_URL_KALTURA: ()=>MATCH_URL_KALTURA,\n    MATCH_URL_MIXCLOUD: ()=>MATCH_URL_MIXCLOUD,\n    MATCH_URL_MUX: ()=>MATCH_URL_MUX,\n    MATCH_URL_SOUNDCLOUD: ()=>MATCH_URL_SOUNDCLOUD,\n    MATCH_URL_STREAMABLE: ()=>MATCH_URL_STREAMABLE,\n    MATCH_URL_TWITCH_CHANNEL: ()=>MATCH_URL_TWITCH_CHANNEL,\n    MATCH_URL_TWITCH_VIDEO: ()=>MATCH_URL_TWITCH_VIDEO,\n    MATCH_URL_VIDYARD: ()=>MATCH_URL_VIDYARD,\n    MATCH_URL_VIMEO: ()=>MATCH_URL_VIMEO,\n    MATCH_URL_WISTIA: ()=>MATCH_URL_WISTIA,\n    MATCH_URL_YOUTUBE: ()=>MATCH_URL_YOUTUBE,\n    VIDEO_EXTENSIONS: ()=>VIDEO_EXTENSIONS,\n    canPlay: ()=>canPlay\n});\nmodule.exports = __toCommonJS(patterns_exports);\nvar import_utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nconst MATCH_URL_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie|education)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//;\nconst MATCH_URL_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nconst MATCH_URL_VIMEO = /vimeo\\.com\\/(?!progressive_redirect).+/;\nconst MATCH_URL_MUX = /stream\\.mux\\.com\\/(?!\\w+\\.m3u8)(\\w+)/;\nconst MATCH_URL_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nconst MATCH_URL_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/;\nconst MATCH_URL_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/;\nconst MATCH_URL_WISTIA = /(?:wistia\\.(?:com|net)|wi\\.st)\\/(?:medias|embed)\\/(?:iframe\\/)?([^?]+)/;\nconst MATCH_URL_TWITCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nconst MATCH_URL_TWITCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nconst MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?(?:[\\w.#_-]+)?/;\nconst MATCH_URL_MIXCLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nconst MATCH_URL_VIDYARD = /vidyard.com\\/(?:watch\\/)?([a-zA-Z0-9-_]+)/;\nconst MATCH_URL_KALTURA = /^https?:\\/\\/[a-zA-Z]+\\.kaltura.(com|org)\\/p\\/([0-9]+)\\/sp\\/([0-9]+)00\\/embedIframeJs\\/uiconf_id\\/([0-9]+)\\/partner_id\\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;\nconst AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nconst VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nconst FLV_EXTENSIONS = /\\.(flv)($|\\?)/i;\nconst canPlayFile = (url)=>{\n    if (url instanceof Array) {\n        for (const item of url){\n            if (typeof item === \"string\" && canPlayFile(item)) {\n                return true;\n            }\n            if (canPlayFile(item.src)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if ((0, import_utils.isMediaStream)(url) || (0, import_utils.isBlobUrl)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);\n};\nconst canPlay = {\n    youtube: (url)=>{\n        if (url instanceof Array) {\n            return url.every((item)=>MATCH_URL_YOUTUBE.test(item));\n        }\n        return MATCH_URL_YOUTUBE.test(url);\n    },\n    soundcloud: (url)=>MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url),\n    vimeo: (url)=>MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),\n    mux: (url)=>MATCH_URL_MUX.test(url),\n    facebook: (url)=>MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url),\n    streamable: (url)=>MATCH_URL_STREAMABLE.test(url),\n    wistia: (url)=>MATCH_URL_WISTIA.test(url),\n    twitch: (url)=>MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url),\n    dailymotion: (url)=>MATCH_URL_DAILYMOTION.test(url),\n    mixcloud: (url)=>MATCH_URL_MIXCLOUD.test(url),\n    vidyard: (url)=>MATCH_URL_VIDYARD.test(url),\n    kaltura: (url)=>MATCH_URL_KALTURA.test(url),\n    file: canPlayFile\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/patterns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/DailyMotion.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-player/lib/players/DailyMotion.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar DailyMotion_exports = {};\n__export(DailyMotion_exports, {\n    default: ()=>DailyMotion\n});\nmodule.exports = __toCommonJS(DailyMotion_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://api.dmcdn.net/all.js\";\nconst SDK_GLOBAL = \"DM\";\nconst SDK_GLOBAL_READY = \"dmAsyncInit\";\nclass DailyMotion extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"onDurationChange\", ()=>{\n            const duration = this.getDuration();\n            this.props.onDuration(duration);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"setMuted\", true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"setMuted\", false);\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        const { controls, config, onError, playing } = this.props;\n        const [, id] = url.match(import_patterns.MATCH_URL_DAILYMOTION);\n        if (this.player) {\n            this.player.load(id, {\n                start: (0, import_utils.parseStartTime)(url),\n                autoplay: playing\n            });\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, (DM)=>DM.player).then((DM)=>{\n            if (!this.container) return;\n            const Player = DM.player;\n            this.player = new Player(this.container, {\n                width: \"100%\",\n                height: \"100%\",\n                video: id,\n                params: {\n                    controls,\n                    autoplay: this.props.playing,\n                    mute: this.props.muted,\n                    start: (0, import_utils.parseStartTime)(url),\n                    origin: window.location.origin,\n                    ...config.params\n                },\n                events: {\n                    apiready: this.props.onReady,\n                    seeked: ()=>this.props.onSeek(this.player.currentTime),\n                    video_end: this.props.onEnded,\n                    durationchange: this.onDurationChange,\n                    pause: this.props.onPause,\n                    playing: this.props.onPlay,\n                    waiting: this.props.onBuffer,\n                    error: (event)=>onError(event)\n                }\n            });\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.player.duration || null;\n    }\n    getCurrentTime() {\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.player.bufferedTime;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(DailyMotion, \"displayName\", \"DailyMotion\");\n__publicField(DailyMotion, \"canPlay\", import_patterns.canPlay.dailymotion);\n__publicField(DailyMotion, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Facebook.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Facebook.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Facebook_exports = {};\n__export(Facebook_exports, {\n    default: ()=>Facebook\n});\nmodule.exports = __toCommonJS(Facebook_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://connect.facebook.net/en_US/sdk.js\";\nconst SDK_GLOBAL = \"FB\";\nconst SDK_GLOBAL_READY = \"fbAsyncInit\";\nconst PLAYER_ID_PREFIX = \"facebook-player-\";\nclass Facebook extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        if (isReady) {\n            (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((FB)=>FB.XFBML.parse());\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((FB)=>{\n            FB.init({\n                appId: this.props.config.appId,\n                xfbml: true,\n                version: this.props.config.version\n            });\n            FB.Event.subscribe(\"xfbml.render\", (msg)=>{\n                this.props.onLoaded();\n            });\n            FB.Event.subscribe(\"xfbml.ready\", (msg)=>{\n                if (msg.type === \"video\" && msg.id === this.playerID) {\n                    this.player = msg.instance;\n                    this.player.subscribe(\"startedPlaying\", this.props.onPlay);\n                    this.player.subscribe(\"paused\", this.props.onPause);\n                    this.player.subscribe(\"finishedPlaying\", this.props.onEnded);\n                    this.player.subscribe(\"startedBuffering\", this.props.onBuffer);\n                    this.player.subscribe(\"finishedBuffering\", this.props.onBufferEnd);\n                    this.player.subscribe(\"error\", this.props.onError);\n                    if (this.props.muted) {\n                        this.callPlayer(\"mute\");\n                    } else {\n                        this.callPlayer(\"unmute\");\n                    }\n                    this.props.onReady();\n                    document.getElementById(this.playerID).querySelector(\"iframe\").style.visibility = \"visible\";\n                }\n            });\n        });\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentPosition\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { attributes } = this.props.config;\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style,\n            id: this.playerID,\n            className: \"fb-video\",\n            \"data-href\": this.props.url,\n            \"data-autoplay\": this.props.playing ? \"true\" : \"false\",\n            \"data-allowfullscreen\": \"true\",\n            \"data-controls\": this.props.controls ? \"true\" : \"false\",\n            ...attributes\n        });\n    }\n}\n__publicField(Facebook, \"displayName\", \"Facebook\");\n__publicField(Facebook, \"canPlay\", import_patterns.canPlay.facebook);\n__publicField(Facebook, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Facebook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/FilePlayer.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/FilePlayer.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar FilePlayer_exports = {};\n__export(FilePlayer_exports, {\n    default: ()=>FilePlayer\n});\nmodule.exports = __toCommonJS(FilePlayer_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst HAS_NAVIGATOR = typeof navigator !== \"undefined\";\nconst IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\nconst IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;\nconst IS_SAFARI = HAS_NAVIGATOR && /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && !window.MSStream;\nconst HLS_SDK_URL = \"https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js\";\nconst HLS_GLOBAL = \"Hls\";\nconst DASH_SDK_URL = \"https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js\";\nconst DASH_GLOBAL = \"dashjs\";\nconst FLV_SDK_URL = \"https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js\";\nconst FLV_GLOBAL = \"flvjs\";\nconst MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/;\nconst MATCH_CLOUDFLARE_STREAM = /https:\\/\\/watch\\.cloudflarestream\\.com\\/([a-z0-9]+)/;\nconst REPLACE_CLOUDFLARE_STREAM = \"https://videodelivery.net/{id}/manifest/video.m3u8\";\nclass FilePlayer extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onReady\", (...args)=>this.props.onReady(...args));\n        __publicField(this, \"onPlay\", (...args)=>this.props.onPlay(...args));\n        __publicField(this, \"onBuffer\", (...args)=>this.props.onBuffer(...args));\n        __publicField(this, \"onBufferEnd\", (...args)=>this.props.onBufferEnd(...args));\n        __publicField(this, \"onPause\", (...args)=>this.props.onPause(...args));\n        __publicField(this, \"onEnded\", (...args)=>this.props.onEnded(...args));\n        __publicField(this, \"onError\", (...args)=>this.props.onError(...args));\n        __publicField(this, \"onPlayBackRateChange\", (event)=>this.props.onPlaybackRateChange(event.target.playbackRate));\n        __publicField(this, \"onEnablePIP\", (...args)=>this.props.onEnablePIP(...args));\n        __publicField(this, \"onDisablePIP\", (e)=>{\n            const { onDisablePIP, playing } = this.props;\n            onDisablePIP(e);\n            if (playing) {\n                this.play();\n            }\n        });\n        __publicField(this, \"onPresentationModeChange\", (e)=>{\n            if (this.player && (0, import_utils.supportsWebKitPresentationMode)(this.player)) {\n                const { webkitPresentationMode } = this.player;\n                if (webkitPresentationMode === \"picture-in-picture\") {\n                    this.onEnablePIP(e);\n                } else if (webkitPresentationMode === \"inline\") {\n                    this.onDisablePIP(e);\n                }\n            }\n        });\n        __publicField(this, \"onSeek\", (e)=>{\n            this.props.onSeek(e.target.currentTime);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.player.muted = true;\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.player.muted = false;\n        });\n        __publicField(this, \"renderSourceElement\", (source, index)=>{\n            if (typeof source === \"string\") {\n                return /* @__PURE__ */ import_react.default.createElement(\"source\", {\n                    key: index,\n                    src: source\n                });\n            }\n            return /* @__PURE__ */ import_react.default.createElement(\"source\", {\n                key: index,\n                ...source\n            });\n        });\n        __publicField(this, \"renderTrack\", (track, index)=>{\n            return /* @__PURE__ */ import_react.default.createElement(\"track\", {\n                key: index,\n                ...track\n            });\n        });\n        __publicField(this, \"ref\", (player)=>{\n            if (this.player) {\n                this.prevPlayer = this.player;\n            }\n            this.player = player;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n        this.addListeners(this.player);\n        const src = this.getSource(this.props.url);\n        if (src) {\n            this.player.src = src;\n        }\n        if (IS_IOS || this.props.config.forceDisableHls) {\n            this.player.load();\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n            this.removeListeners(this.prevPlayer, prevProps.url);\n            this.addListeners(this.player);\n        }\n        if (this.props.url !== prevProps.url && !(0, import_utils.isMediaStream)(this.props.url) && !(this.props.url instanceof Array)) {\n            this.player.srcObject = null;\n        }\n    }\n    componentWillUnmount() {\n        this.player.removeAttribute(\"src\");\n        this.removeListeners(this.player);\n        if (this.hls) {\n            this.hls.destroy();\n        }\n    }\n    addListeners(player) {\n        const { url, playsinline } = this.props;\n        player.addEventListener(\"play\", this.onPlay);\n        player.addEventListener(\"waiting\", this.onBuffer);\n        player.addEventListener(\"playing\", this.onBufferEnd);\n        player.addEventListener(\"pause\", this.onPause);\n        player.addEventListener(\"seeked\", this.onSeek);\n        player.addEventListener(\"ended\", this.onEnded);\n        player.addEventListener(\"error\", this.onError);\n        player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        if (!this.shouldUseHLS(url)) {\n            player.addEventListener(\"canplay\", this.onReady);\n        }\n        if (playsinline) {\n            player.setAttribute(\"playsinline\", \"\");\n            player.setAttribute(\"webkit-playsinline\", \"\");\n            player.setAttribute(\"x5-playsinline\", \"\");\n        }\n    }\n    removeListeners(player, url) {\n        player.removeEventListener(\"canplay\", this.onReady);\n        player.removeEventListener(\"play\", this.onPlay);\n        player.removeEventListener(\"waiting\", this.onBuffer);\n        player.removeEventListener(\"playing\", this.onBufferEnd);\n        player.removeEventListener(\"pause\", this.onPause);\n        player.removeEventListener(\"seeked\", this.onSeek);\n        player.removeEventListener(\"ended\", this.onEnded);\n        player.removeEventListener(\"error\", this.onError);\n        player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.removeEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        if (!this.shouldUseHLS(url)) {\n            player.removeEventListener(\"canplay\", this.onReady);\n        }\n    }\n    shouldUseAudio(props) {\n        if (props.config.forceVideo) {\n            return false;\n        }\n        if (props.config.attributes.poster) {\n            return false;\n        }\n        return import_patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;\n    }\n    shouldUseHLS(url) {\n        if (IS_SAFARI && this.props.config.forceSafariHLS || this.props.config.forceHLS) {\n            return true;\n        }\n        if (IS_IOS || this.props.config.forceDisableHls) {\n            return false;\n        }\n        return import_patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);\n    }\n    shouldUseDASH(url) {\n        return import_patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;\n    }\n    shouldUseFLV(url) {\n        return import_patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;\n    }\n    load(url) {\n        const { hlsVersion, hlsOptions, dashVersion, flvVersion } = this.props.config;\n        if (this.hls) {\n            this.hls.destroy();\n        }\n        if (this.dash) {\n            this.dash.reset();\n        }\n        if (this.shouldUseHLS(url)) {\n            (0, import_utils.getSDK)(HLS_SDK_URL.replace(\"VERSION\", hlsVersion), HLS_GLOBAL).then((Hls)=>{\n                this.hls = new Hls(hlsOptions);\n                this.hls.on(Hls.Events.MANIFEST_PARSED, ()=>{\n                    this.props.onReady();\n                });\n                this.hls.on(Hls.Events.ERROR, (e, data)=>{\n                    this.props.onError(e, data, this.hls, Hls);\n                });\n                if (MATCH_CLOUDFLARE_STREAM.test(url)) {\n                    const id = url.match(MATCH_CLOUDFLARE_STREAM)[1];\n                    this.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace(\"{id}\", id));\n                } else {\n                    this.hls.loadSource(url);\n                }\n                this.hls.attachMedia(this.player);\n                this.props.onLoaded();\n            });\n        }\n        if (this.shouldUseDASH(url)) {\n            (0, import_utils.getSDK)(DASH_SDK_URL.replace(\"VERSION\", dashVersion), DASH_GLOBAL).then((dashjs)=>{\n                this.dash = dashjs.MediaPlayer().create();\n                this.dash.initialize(this.player, url, this.props.playing);\n                this.dash.on(\"error\", this.props.onError);\n                if (parseInt(dashVersion) < 3) {\n                    this.dash.getDebug().setLogToBrowserConsole(false);\n                } else {\n                    this.dash.updateSettings({\n                        debug: {\n                            logLevel: dashjs.Debug.LOG_LEVEL_NONE\n                        }\n                    });\n                }\n                this.props.onLoaded();\n            });\n        }\n        if (this.shouldUseFLV(url)) {\n            (0, import_utils.getSDK)(FLV_SDK_URL.replace(\"VERSION\", flvVersion), FLV_GLOBAL).then((flvjs)=>{\n                this.flv = flvjs.createPlayer({\n                    type: \"flv\",\n                    url\n                });\n                this.flv.attachMediaElement(this.player);\n                this.flv.on(flvjs.Events.ERROR, (e, data)=>{\n                    this.props.onError(e, data, this.flv, flvjs);\n                });\n                this.flv.load();\n                this.props.onLoaded();\n            });\n        }\n        if (url instanceof Array) {\n            this.player.load();\n        } else if ((0, import_utils.isMediaStream)(url)) {\n            try {\n                this.player.srcObject = url;\n            } catch (e) {\n                this.player.src = window.URL.createObjectURL(url);\n            }\n        }\n    }\n    play() {\n        const promise = this.player.play();\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.player.pause();\n    }\n    stop() {\n        this.player.removeAttribute(\"src\");\n        if (this.dash) {\n            this.dash.reset();\n        }\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.player.currentTime = seconds;\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.player.volume = fraction;\n    }\n    enablePIP() {\n        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n            this.player.requestPictureInPicture();\n        } else if ((0, import_utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"picture-in-picture\") {\n            this.player.webkitSetPresentationMode(\"picture-in-picture\");\n        }\n    }\n    disablePIP() {\n        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n            document.exitPictureInPicture();\n        } else if ((0, import_utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"inline\") {\n            this.player.webkitSetPresentationMode(\"inline\");\n        }\n    }\n    setPlaybackRate(rate) {\n        try {\n            this.player.playbackRate = rate;\n        } catch (error) {\n            this.props.onError(error);\n        }\n    }\n    getDuration() {\n        if (!this.player) return null;\n        const { duration, seekable } = this.player;\n        if (duration === Infinity && seekable.length > 0) {\n            return seekable.end(seekable.length - 1);\n        }\n        return duration;\n    }\n    getCurrentTime() {\n        if (!this.player) return null;\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        if (!this.player) return null;\n        const { buffered } = this.player;\n        if (buffered.length === 0) {\n            return 0;\n        }\n        const end = buffered.end(buffered.length - 1);\n        const duration = this.getDuration();\n        if (end > duration) {\n            return duration;\n        }\n        return end;\n    }\n    getSource(url) {\n        const useHLS = this.shouldUseHLS(url);\n        const useDASH = this.shouldUseDASH(url);\n        const useFLV = this.shouldUseFLV(url);\n        if (url instanceof Array || (0, import_utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {\n            return void 0;\n        }\n        if (MATCH_DROPBOX_URL.test(url)) {\n            return url.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\");\n        }\n        return url;\n    }\n    render() {\n        const { url, playing, loop, controls, muted, config, width, height } = this.props;\n        const useAudio = this.shouldUseAudio(this.props);\n        const Element = useAudio ? \"audio\" : \"video\";\n        const style = {\n            width: width === \"auto\" ? width : \"100%\",\n            height: height === \"auto\" ? height : \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(Element, {\n            ref: this.ref,\n            src: this.getSource(url),\n            style,\n            preload: \"auto\",\n            autoPlay: playing || void 0,\n            controls,\n            muted,\n            loop,\n            ...config.attributes\n        }, url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));\n    }\n}\n__publicField(FilePlayer, \"displayName\", \"FilePlayer\");\n__publicField(FilePlayer, \"canPlay\", import_patterns.canPlay.file);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Kaltura.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Kaltura.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Kaltura_exports = {};\n__export(Kaltura_exports, {\n    default: ()=>Kaltura\n});\nmodule.exports = __toCommonJS(Kaltura_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nconst SDK_GLOBAL = \"playerjs\";\nclass Kaltura extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((playerjs)=>{\n            if (!this.iframe) return;\n            this.player = new playerjs.Player(this.iframe);\n            this.player.on(\"ready\", ()=>{\n                setTimeout(()=>{\n                    this.player.isReady = true;\n                    this.player.setLoop(this.props.loop);\n                    if (this.props.muted) {\n                        this.player.mute();\n                    }\n                    this.addListeners(this.player, this.props);\n                    this.props.onReady();\n                }, 500);\n            });\n        }, this.props.onError);\n    }\n    addListeners(player, props) {\n        player.on(\"play\", props.onPlay);\n        player.on(\"pause\", props.onPause);\n        player.on(\"ended\", props.onEnded);\n        player.on(\"error\", props.onError);\n        player.on(\"timeupdate\", ({ duration, seconds })=>{\n            this.duration = duration;\n            this.currentTime = seconds;\n        });\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            ref: this.ref,\n            src: this.props.url,\n            frameBorder: \"0\",\n            scrolling: \"no\",\n            style,\n            allow: \"encrypted-media; autoplay; fullscreen;\",\n            referrerPolicy: \"no-referrer-when-downgrade\"\n        });\n    }\n}\n__publicField(Kaltura, \"displayName\", \"Kaltura\");\n__publicField(Kaltura, \"canPlay\", import_patterns.canPlay.kaltura);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Kaltura.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Mixcloud.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mixcloud.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Mixcloud_exports = {};\n__export(Mixcloud_exports, {\n    default: ()=>Mixcloud\n});\nmodule.exports = __toCommonJS(Mixcloud_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://widget.mixcloud.com/media/js/widgetApi.js\";\nconst SDK_GLOBAL = \"Mixcloud\";\nclass Mixcloud extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{});\n        __publicField(this, \"unmute\", ()=>{});\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Mixcloud2)=>{\n            this.player = Mixcloud2.PlayerWidget(this.iframe);\n            this.player.ready.then(()=>{\n                this.player.events.play.on(this.props.onPlay);\n                this.player.events.pause.on(this.props.onPause);\n                this.player.events.ended.on(this.props.onEnded);\n                this.player.events.error.on(this.props.error);\n                this.player.events.progress.on((seconds, duration)=>{\n                    this.currentTime = seconds;\n                    this.duration = duration;\n                });\n                this.props.onReady();\n            });\n        }, this.props.onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {}\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { url, config } = this.props;\n        const id = url.match(import_patterns.MATCH_URL_MIXCLOUD)[1];\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        const query = (0, import_utils.queryString)({\n            ...config.options,\n            feed: `/${id}/`\n        });\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            key: id,\n            ref: this.ref,\n            style,\n            src: `https://www.mixcloud.com/widget/iframe/?${query}`,\n            frameBorder: \"0\",\n            allow: \"autoplay\"\n        });\n    }\n}\n__publicField(Mixcloud, \"displayName\", \"Mixcloud\");\n__publicField(Mixcloud, \"canPlay\", import_patterns.canPlay.mixcloud);\n__publicField(Mixcloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Mux.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mux.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Mux_exports = {};\n__export(Mux_exports, {\n    default: ()=>Mux\n});\nmodule.exports = __toCommonJS(Mux_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://cdn.jsdelivr.net/npm/@mux/mux-player@VERSION/dist/mux-player.mjs\";\nclass Mux extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onReady\", (...args)=>this.props.onReady(...args));\n        __publicField(this, \"onPlay\", (...args)=>this.props.onPlay(...args));\n        __publicField(this, \"onBuffer\", (...args)=>this.props.onBuffer(...args));\n        __publicField(this, \"onBufferEnd\", (...args)=>this.props.onBufferEnd(...args));\n        __publicField(this, \"onPause\", (...args)=>this.props.onPause(...args));\n        __publicField(this, \"onEnded\", (...args)=>this.props.onEnded(...args));\n        __publicField(this, \"onError\", (...args)=>this.props.onError(...args));\n        __publicField(this, \"onPlayBackRateChange\", (event)=>this.props.onPlaybackRateChange(event.target.playbackRate));\n        __publicField(this, \"onEnablePIP\", (...args)=>this.props.onEnablePIP(...args));\n        __publicField(this, \"onSeek\", (e)=>{\n            this.props.onSeek(e.target.currentTime);\n        });\n        __publicField(this, \"onDurationChange\", ()=>{\n            const duration = this.getDuration();\n            this.props.onDuration(duration);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.player.muted = true;\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.player.muted = false;\n        });\n        __publicField(this, \"ref\", (player)=>{\n            this.player = player;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n        this.addListeners(this.player);\n        const playbackId = this.getPlaybackId(this.props.url);\n        if (playbackId) {\n            this.player.playbackId = playbackId;\n        }\n    }\n    componentWillUnmount() {\n        this.player.playbackId = null;\n        this.removeListeners(this.player);\n    }\n    addListeners(player) {\n        const { playsinline } = this.props;\n        player.addEventListener(\"play\", this.onPlay);\n        player.addEventListener(\"waiting\", this.onBuffer);\n        player.addEventListener(\"playing\", this.onBufferEnd);\n        player.addEventListener(\"pause\", this.onPause);\n        player.addEventListener(\"seeked\", this.onSeek);\n        player.addEventListener(\"ended\", this.onEnded);\n        player.addEventListener(\"error\", this.onError);\n        player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        player.addEventListener(\"canplay\", this.onReady);\n        if (playsinline) {\n            player.setAttribute(\"playsinline\", \"\");\n        }\n    }\n    removeListeners(player) {\n        player.removeEventListener(\"canplay\", this.onReady);\n        player.removeEventListener(\"play\", this.onPlay);\n        player.removeEventListener(\"waiting\", this.onBuffer);\n        player.removeEventListener(\"playing\", this.onBufferEnd);\n        player.removeEventListener(\"pause\", this.onPause);\n        player.removeEventListener(\"seeked\", this.onSeek);\n        player.removeEventListener(\"ended\", this.onEnded);\n        player.removeEventListener(\"error\", this.onError);\n        player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.removeEventListener(\"canplay\", this.onReady);\n    }\n    async load(url) {\n        var _a;\n        const { onError, config } = this.props;\n        if (!((_a = globalThis.customElements) == null ? void 0 : _a.get(\"mux-player\"))) {\n            try {\n                const sdkUrl = SDK_URL.replace(\"VERSION\", config.version);\n                await import(/* webpackIgnore: true */ `${sdkUrl}`);\n                this.props.onLoaded();\n            } catch (error) {\n                onError(error);\n            }\n        }\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        this.player.playbackId = id;\n    }\n    play() {\n        const promise = this.player.play();\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.player.pause();\n    }\n    stop() {\n        this.player.playbackId = null;\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.player.currentTime = seconds;\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.player.volume = fraction;\n    }\n    enablePIP() {\n        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n            this.player.requestPictureInPicture();\n        }\n    }\n    disablePIP() {\n        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n            document.exitPictureInPicture();\n        }\n    }\n    setPlaybackRate(rate) {\n        try {\n            this.player.playbackRate = rate;\n        } catch (error) {\n            this.props.onError(error);\n        }\n    }\n    getDuration() {\n        if (!this.player) return null;\n        const { duration, seekable } = this.player;\n        if (duration === Infinity && seekable.length > 0) {\n            return seekable.end(seekable.length - 1);\n        }\n        return duration;\n    }\n    getCurrentTime() {\n        if (!this.player) return null;\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        if (!this.player) return null;\n        const { buffered } = this.player;\n        if (buffered.length === 0) {\n            return 0;\n        }\n        const end = buffered.end(buffered.length - 1);\n        const duration = this.getDuration();\n        if (end > duration) {\n            return duration;\n        }\n        return end;\n    }\n    getPlaybackId(url) {\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        return id;\n    }\n    render() {\n        const { url, playing, loop, controls, muted, config, width, height } = this.props;\n        const style = {\n            width: width === \"auto\" ? width : \"100%\",\n            height: height === \"auto\" ? height : \"100%\"\n        };\n        if (controls === false) {\n            style[\"--controls\"] = \"none\";\n        }\n        return /* @__PURE__ */ import_react.default.createElement(\"mux-player\", {\n            ref: this.ref,\n            \"playback-id\": this.getPlaybackId(url),\n            style,\n            preload: \"auto\",\n            autoPlay: playing || void 0,\n            muted: muted ? \"\" : void 0,\n            loop: loop ? \"\" : void 0,\n            ...config.attributes\n        });\n    }\n}\n__publicField(Mux, \"displayName\", \"Mux\");\n__publicField(Mux, \"canPlay\", import_patterns.canPlay.mux);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Mux.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/SoundCloud.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/SoundCloud.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar SoundCloud_exports = {};\n__export(SoundCloud_exports, {\n    default: ()=>SoundCloud\n});\nmodule.exports = __toCommonJS(SoundCloud_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://w.soundcloud.com/player/api.js\";\nconst SDK_GLOBAL = \"SC\";\nclass SoundCloud extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"fractionLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.setVolume(0);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            if (this.props.volume !== null) {\n                this.setVolume(this.props.volume);\n            }\n        });\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((SC)=>{\n            if (!this.iframe) return;\n            const { PLAY, PLAY_PROGRESS, PAUSE, FINISH, ERROR } = SC.Widget.Events;\n            if (!isReady) {\n                this.player = SC.Widget(this.iframe);\n                this.player.bind(PLAY, this.props.onPlay);\n                this.player.bind(PAUSE, ()=>{\n                    const remaining = this.duration - this.currentTime;\n                    if (remaining < 0.05) {\n                        return;\n                    }\n                    this.props.onPause();\n                });\n                this.player.bind(PLAY_PROGRESS, (e)=>{\n                    this.currentTime = e.currentPosition / 1e3;\n                    this.fractionLoaded = e.loadedProgress;\n                });\n                this.player.bind(FINISH, ()=>this.props.onEnded());\n                this.player.bind(ERROR, (e)=>this.props.onError(e));\n            }\n            this.player.load(url, {\n                ...this.props.config.options,\n                callback: ()=>{\n                    this.player.getDuration((duration)=>{\n                        this.duration = duration / 1e3;\n                        this.props.onReady();\n                    });\n                }\n            });\n        });\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seekTo\", seconds * 1e3);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.fractionLoaded * this.duration;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            ref: this.ref,\n            src: `https://w.soundcloud.com/player/?url=${encodeURIComponent(this.props.url)}`,\n            style,\n            frameBorder: 0,\n            allow: \"autoplay\"\n        });\n    }\n}\n__publicField(SoundCloud, \"displayName\", \"SoundCloud\");\n__publicField(SoundCloud, \"canPlay\", import_patterns.canPlay.soundcloud);\n__publicField(SoundCloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1NvdW5kQ2xvdWQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLFdBQVdDLE9BQU9DLE1BQU07QUFDNUIsSUFBSUMsWUFBWUYsT0FBT0csY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJKLE9BQU9LLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JOLE9BQU9PLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlUixPQUFPUyxjQUFjO0FBQ3hDLElBQUlDLGVBQWVWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTVosVUFBVVksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZnBCLFVBQVVtQixRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFTixZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJUSxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlaLE9BQU9ULGtCQUFrQnFCLE1BQ2hDLElBQUksQ0FBQ2pCLGFBQWFvQixJQUFJLENBQUNKLElBQUlYLFFBQVFBLFFBQVFhLFFBQ3pDMUIsVUFBVXdCLElBQUlYLEtBQUs7WUFBRVMsS0FBSyxJQUFNRyxJQUFJLENBQUNaLElBQUk7WUFBRUUsWUFBWSxDQUFFWSxDQUFBQSxPQUFPekIsaUJBQWlCdUIsTUFBTVosSUFBRyxLQUFNYyxLQUFLWixVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPUztBQUNUO0FBQ0EsSUFBSUssVUFB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SUFDdEI7SUFDQXFCLGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDcEIsV0FBVztJQUN6QjtJQUNBcUIsbUJBQW1CO1FBQ2pCLE9BQU8sSUFBSSxDQUFDakIsY0FBYyxHQUFHLElBQUksQ0FBQ0wsUUFBUTtJQUM1QztJQUNBdUIsU0FBUztRQUNQLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDOUMsS0FBSztRQUM5QixNQUFNK0MsUUFBUTtZQUNaQyxPQUFPO1lBQ1BDLFFBQVE7WUFDUkg7UUFDRjtRQUNBLE9BQU8sYUFBYSxHQUFHekQsYUFBYUosT0FBTyxDQUFDaUUsYUFBYSxDQUN2RCxVQUNBO1lBQ0VDLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2JDLEtBQUssQ0FBQyxxQ0FBcUMsRUFBRUMsbUJBQW1CLElBQUksQ0FBQ3JELEtBQUssQ0FBQ00sR0FBRyxFQUFFLENBQUM7WUFDakZ5QztZQUNBTyxhQUFhO1lBQ2JDLE9BQU87UUFDVDtJQUVKO0FBQ0Y7QUFDQXhFLGNBQWNHLFlBQVksZUFBZTtBQUN6Q0gsY0FBY0csWUFBWSxXQUFXTSxnQkFBZ0JnRSxPQUFPLENBQUNDLFVBQVU7QUFDdkUxRSxjQUFjRyxZQUFZLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW12aWJlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9Tb3VuZENsb3VkLmpzP2MxNjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIFNvdW5kQ2xvdWRfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoU291bmRDbG91ZF9leHBvcnRzLCB7XG4gIGRlZmF1bHQ6ICgpID0+IFNvdW5kQ2xvdWRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoU291bmRDbG91ZF9leHBvcnRzKTtcbnZhciBpbXBvcnRfcmVhY3QgPSBfX3RvRVNNKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIGltcG9ydF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcbmNvbnN0IFNES19VUkwgPSBcImh0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzXCI7XG5jb25zdCBTREtfR0xPQkFMID0gXCJTQ1wiO1xuY2xhc3MgU291bmRDbG91ZCBleHRlbmRzIGltcG9ydF9yZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjYWxsUGxheWVyXCIsIGltcG9ydF91dGlscy5jYWxsUGxheWVyKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZHVyYXRpb25cIiwgbnVsbCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImN1cnJlbnRUaW1lXCIsIG51bGwpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmcmFjdGlvbkxvYWRlZFwiLCBudWxsKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNldFZvbHVtZSgwKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwidW5tdXRlXCIsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldFZvbHVtZSh0aGlzLnByb3BzLnZvbHVtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlZlwiLCAoaWZyYW1lKSA9PiB7XG4gICAgICB0aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICB9KTtcbiAgfVxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLm9uTW91bnQgJiYgdGhpcy5wcm9wcy5vbk1vdW50KHRoaXMpO1xuICB9XG4gIGxvYWQodXJsLCBpc1JlYWR5KSB7XG4gICAgKDAsIGltcG9ydF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwpLnRoZW4oKFNDKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaWZyYW1lKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCB7IFBMQVksIFBMQVlfUFJPR1JFU1MsIFBBVVNFLCBGSU5JU0gsIEVSUk9SIH0gPSBTQy5XaWRnZXQuRXZlbnRzO1xuICAgICAgaWYgKCFpc1JlYWR5KSB7XG4gICAgICAgIHRoaXMucGxheWVyID0gU0MuV2lkZ2V0KHRoaXMuaWZyYW1lKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIuYmluZChQTEFZLCB0aGlzLnByb3BzLm9uUGxheSk7XG4gICAgICAgIHRoaXMucGxheWVyLmJpbmQoUEFVU0UsICgpID0+IHtcbiAgICAgICAgICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmR1cmF0aW9uIC0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgICAgICBpZiAocmVtYWluaW5nIDwgMC4wNSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnByb3BzLm9uUGF1c2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGxheWVyLmJpbmQoUExBWV9QUk9HUkVTUywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gZS5jdXJyZW50UG9zaXRpb24gLyAxZTM7XG4gICAgICAgICAgdGhpcy5mcmFjdGlvbkxvYWRlZCA9IGUubG9hZGVkUHJvZ3Jlc3M7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBsYXllci5iaW5kKEZJTklTSCwgKCkgPT4gdGhpcy5wcm9wcy5vbkVuZGVkKCkpO1xuICAgICAgICB0aGlzLnBsYXllci5iaW5kKEVSUk9SLCAoZSkgPT4gdGhpcy5wcm9wcy5vbkVycm9yKGUpKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGxheWVyLmxvYWQodXJsLCB7XG4gICAgICAgIC4uLnRoaXMucHJvcHMuY29uZmlnLm9wdGlvbnMsXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKGR1cmF0aW9uKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb24gLyAxZTM7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uUmVhZHkoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcGxheSgpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJwbGF5XCIpO1xuICB9XG4gIHBhdXNlKCkge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInBhdXNlXCIpO1xuICB9XG4gIHN0b3AoKSB7XG4gIH1cbiAgc2Vla1RvKHNlY29uZHMsIGtlZXBQbGF5aW5nID0gdHJ1ZSkge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNlZWtUb1wiLCBzZWNvbmRzICogMWUzKTtcbiAgICBpZiAoIWtlZXBQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNldFZvbHVtZVwiLCBmcmFjdGlvbiAqIDEwMCk7XG4gIH1cbiAgZ2V0RHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZHVyYXRpb247XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XG4gIH1cbiAgZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5mcmFjdGlvbkxvYWRlZCAqIHRoaXMuZHVyYXRpb247XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICBkaXNwbGF5XG4gICAgfTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIGltcG9ydF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImlmcmFtZVwiLFxuICAgICAge1xuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzcmM6IGBodHRwczovL3cuc291bmRjbG91ZC5jb20vcGxheWVyLz91cmw9JHtlbmNvZGVVUklDb21wb25lbnQodGhpcy5wcm9wcy51cmwpfWAsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICBmcmFtZUJvcmRlcjogMCxcbiAgICAgICAgYWxsb3c6IFwiYXV0b3BsYXlcIlxuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbl9fcHVibGljRmllbGQoU291bmRDbG91ZCwgXCJkaXNwbGF5TmFtZVwiLCBcIlNvdW5kQ2xvdWRcIik7XG5fX3B1YmxpY0ZpZWxkKFNvdW5kQ2xvdWQsIFwiY2FuUGxheVwiLCBpbXBvcnRfcGF0dGVybnMuY2FuUGxheS5zb3VuZGNsb3VkKTtcbl9fcHVibGljRmllbGQoU291bmRDbG91ZCwgXCJsb29wT25FbmRlZFwiLCB0cnVlKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImNhbGwiLCJfX3RvRVNNIiwibW9kIiwiaXNOb2RlTW9kZSIsIl9fZXNNb2R1bGUiLCJfX3RvQ29tbW9uSlMiLCJfX3B1YmxpY0ZpZWxkIiwiU291bmRDbG91ZF9leHBvcnRzIiwiZGVmYXVsdCIsIlNvdW5kQ2xvdWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1wb3J0X3JlYWN0IiwicmVxdWlyZSIsImltcG9ydF91dGlscyIsImltcG9ydF9wYXR0ZXJucyIsIlNES19VUkwiLCJTREtfR0xPQkFMIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJjYWxsUGxheWVyIiwic2V0Vm9sdW1lIiwicHJvcHMiLCJ2b2x1bWUiLCJpZnJhbWUiLCJjb21wb25lbnREaWRNb3VudCIsIm9uTW91bnQiLCJsb2FkIiwidXJsIiwiaXNSZWFkeSIsImdldFNESyIsInRoZW4iLCJTQyIsIlBMQVkiLCJQTEFZX1BST0dSRVNTIiwiUEFVU0UiLCJGSU5JU0giLCJFUlJPUiIsIldpZGdldCIsIkV2ZW50cyIsInBsYXllciIsImJpbmQiLCJvblBsYXkiLCJyZW1haW5pbmciLCJkdXJhdGlvbiIsImN1cnJlbnRUaW1lIiwib25QYXVzZSIsImUiLCJjdXJyZW50UG9zaXRpb24iLCJmcmFjdGlvbkxvYWRlZCIsImxvYWRlZFByb2dyZXNzIiwib25FbmRlZCIsIm9uRXJyb3IiLCJjb25maWciLCJvcHRpb25zIiwiY2FsbGJhY2siLCJnZXREdXJhdGlvbiIsIm9uUmVhZHkiLCJwbGF5IiwicGF1c2UiLCJzdG9wIiwic2Vla1RvIiwic2Vjb25kcyIsImtlZXBQbGF5aW5nIiwiZnJhY3Rpb24iLCJnZXRDdXJyZW50VGltZSIsImdldFNlY29uZHNMb2FkZWQiLCJyZW5kZXIiLCJkaXNwbGF5Iiwic3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJzcmMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmcmFtZUJvcmRlciIsImFsbG93IiwiY2FuUGxheSIsInNvdW5kY2xvdWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Streamable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/Streamable.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Streamable_exports = {};\n__export(Streamable_exports, {\n    default: ()=>Streamable\n});\nmodule.exports = __toCommonJS(Streamable_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nconst SDK_GLOBAL = \"playerjs\";\nclass Streamable extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n        __publicField(this, \"ref\", (iframe)=>{\n            this.iframe = iframe;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((playerjs)=>{\n            if (!this.iframe) return;\n            this.player = new playerjs.Player(this.iframe);\n            this.player.setLoop(this.props.loop);\n            this.player.on(\"ready\", this.props.onReady);\n            this.player.on(\"play\", this.props.onPlay);\n            this.player.on(\"pause\", this.props.onPause);\n            this.player.on(\"seeked\", this.props.onSeek);\n            this.player.on(\"ended\", this.props.onEnded);\n            this.player.on(\"error\", this.props.onError);\n            this.player.on(\"timeupdate\", ({ duration, seconds })=>{\n                this.duration = duration;\n                this.currentTime = seconds;\n            });\n            this.player.on(\"buffered\", ({ percent })=>{\n                if (this.duration) {\n                    this.secondsLoaded = this.duration * percent;\n                }\n            });\n            if (this.props.muted) {\n                this.player.mute();\n            }\n        }, this.props.onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {}\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const id = this.props.url.match(import_patterns.MATCH_URL_STREAMABLE)[1];\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"iframe\", {\n            ref: this.ref,\n            src: `https://streamable.com/o/${id}`,\n            frameBorder: \"0\",\n            scrolling: \"no\",\n            style,\n            allow: \"encrypted-media; autoplay; fullscreen;\"\n        });\n    }\n}\n__publicField(Streamable, \"displayName\", \"Streamable\");\n__publicField(Streamable, \"canPlay\", import_patterns.canPlay.streamable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Streamable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Twitch_exports = {};\n__export(Twitch_exports, {\n    default: ()=>Twitch\n});\nmodule.exports = __toCommonJS(Twitch_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\nconst SDK_GLOBAL = \"Twitch\";\nconst PLAYER_ID_PREFIX = \"twitch-player-\";\nclass Twitch extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"setMuted\", true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"setMuted\", false);\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        const { playsinline, onError, config, controls } = this.props;\n        const isChannel = import_patterns.MATCH_URL_TWITCH_CHANNEL.test(url);\n        const id = isChannel ? url.match(import_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(import_patterns.MATCH_URL_TWITCH_VIDEO)[1];\n        if (isReady) {\n            if (isChannel) {\n                this.player.setChannel(id);\n            } else {\n                this.player.setVideo(\"v\" + id);\n            }\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Twitch2)=>{\n            this.player = new Twitch2.Player(this.playerID, {\n                video: isChannel ? \"\" : id,\n                channel: isChannel ? id : \"\",\n                height: \"100%\",\n                width: \"100%\",\n                playsinline,\n                autoplay: this.props.playing,\n                muted: this.props.muted,\n                // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n                controls: isChannel ? true : controls,\n                time: (0, import_utils.parseStartTime)(url),\n                ...config.options\n            });\n            const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE, SEEK } = Twitch2.Player;\n            this.player.addEventListener(READY, this.props.onReady);\n            this.player.addEventListener(PLAYING, this.props.onPlay);\n            this.player.addEventListener(PAUSE, this.props.onPause);\n            this.player.addEventListener(ENDED, this.props.onEnded);\n            this.player.addEventListener(SEEK, this.props.onSeek);\n            this.player.addEventListener(ONLINE, this.props.onLoaded);\n            this.player.addEventListener(OFFLINE, this.props.onLoaded);\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.callPlayer(\"pause\");\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentTime\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style,\n            id: this.playerID\n        });\n    }\n}\n__publicField(Twitch, \"displayName\", \"Twitch\");\n__publicField(Twitch, \"canPlay\", import_patterns.canPlay.twitch);\n__publicField(Twitch, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Twitch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vidyard.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vidyard.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Vidyard_exports = {};\n__export(Vidyard_exports, {\n    default: ()=>Vidyard\n});\nmodule.exports = __toCommonJS(Vidyard_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\nconst SDK_GLOBAL = \"VidyardV4\";\nconst SDK_GLOBAL_READY = \"onVidyardAPI\";\nclass Vidyard extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"mute\", ()=>{\n            this.setVolume(0);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            if (this.props.volume !== null) {\n                this.setVolume(this.props.volume);\n            }\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        const { playing, config, onError, onDuration } = this.props;\n        const id = url && url.match(import_patterns.MATCH_URL_VIDYARD)[1];\n        if (this.player) {\n            this.stop();\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then((Vidyard2)=>{\n            if (!this.container) return;\n            Vidyard2.api.addReadyListener((data, player)=>{\n                if (this.player) {\n                    return;\n                }\n                this.player = player;\n                this.player.on(\"ready\", this.props.onReady);\n                this.player.on(\"play\", this.props.onPlay);\n                this.player.on(\"pause\", this.props.onPause);\n                this.player.on(\"seek\", this.props.onSeek);\n                this.player.on(\"playerComplete\", this.props.onEnded);\n            }, id);\n            Vidyard2.api.renderPlayer({\n                uuid: id,\n                container: this.container,\n                autoplay: playing ? 1 : 0,\n                ...config.options\n            });\n            Vidyard2.api.getPlayerMetadata(id).then((meta)=>{\n                this.duration = meta.length_in_seconds;\n                onDuration(meta.length_in_seconds);\n            });\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        window.VidyardV4.api.destroyPlayer(this.player);\n    }\n    seekTo(amount, keepPlaying = true) {\n        this.callPlayer(\"seek\", amount);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackSpeed\", rate);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"currentTime\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(Vidyard, \"displayName\", \"Vidyard\");\n__publicField(Vidyard, \"canPlay\", import_patterns.canPlay.vidyard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vidyard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vimeo.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vimeo.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Vimeo_exports = {};\n__export(Vimeo_exports, {\n    default: ()=>Vimeo\n});\nmodule.exports = __toCommonJS(Vimeo_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://player.vimeo.com/api/player.js\";\nconst SDK_GLOBAL = \"Vimeo\";\nconst cleanUrl = (url)=>{\n    return url.replace(\"/manage/videos\", \"\");\n};\nclass Vimeo extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        // Prevent checking isLoading when URL changes\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.setMuted(true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.setMuted(false);\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        this.duration = null;\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Vimeo2)=>{\n            if (!this.container) return;\n            const { playerOptions, title } = this.props.config;\n            this.player = new Vimeo2.Player(this.container, {\n                url: cleanUrl(url),\n                autoplay: this.props.playing,\n                muted: this.props.muted,\n                loop: this.props.loop,\n                playsinline: this.props.playsinline,\n                controls: this.props.controls,\n                ...playerOptions\n            });\n            this.player.ready().then(()=>{\n                const iframe = this.container.querySelector(\"iframe\");\n                iframe.style.width = \"100%\";\n                iframe.style.height = \"100%\";\n                if (title) {\n                    iframe.title = title;\n                }\n            }).catch(this.props.onError);\n            this.player.on(\"loaded\", ()=>{\n                this.props.onReady();\n                this.refreshDuration();\n            });\n            this.player.on(\"play\", ()=>{\n                this.props.onPlay();\n                this.refreshDuration();\n            });\n            this.player.on(\"pause\", this.props.onPause);\n            this.player.on(\"seeked\", (e)=>this.props.onSeek(e.seconds));\n            this.player.on(\"ended\", this.props.onEnded);\n            this.player.on(\"error\", this.props.onError);\n            this.player.on(\"timeupdate\", ({ seconds })=>{\n                this.currentTime = seconds;\n            });\n            this.player.on(\"progress\", ({ seconds })=>{\n                this.secondsLoaded = seconds;\n            });\n            this.player.on(\"bufferstart\", this.props.onBuffer);\n            this.player.on(\"bufferend\", this.props.onBufferEnd);\n            this.player.on(\"playbackratechange\", (e)=>this.props.onPlaybackRateChange(e.playbackRate));\n        }, this.props.onError);\n    }\n    refreshDuration() {\n        this.player.getDuration().then((duration)=>{\n            this.duration = duration;\n        });\n    }\n    play() {\n        const promise = this.callPlayer(\"play\");\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.callPlayer(\"unload\");\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setMuted(muted) {\n        this.callPlayer(\"setMuted\", muted);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackRate\", rate);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            key: this.props.url,\n            ref: this.ref,\n            style\n        });\n    }\n}\n__publicField(Vimeo, \"displayName\", \"Vimeo\");\n__publicField(Vimeo, \"canPlay\", import_patterns.canPlay.vimeo);\n__publicField(Vimeo, \"forceLoad\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vimeo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Wistia.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Wistia.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Wistia_exports = {};\n__export(Wistia_exports, {\n    default: ()=>Wistia\n});\nmodule.exports = __toCommonJS(Wistia_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://fast.wistia.com/assets/external/E-v1.js\";\nconst SDK_GLOBAL = \"Wistia\";\nconst PLAYER_ID_PREFIX = \"wistia-player-\";\nclass Wistia extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || `${PLAYER_ID_PREFIX}${(0, import_utils.randomString)()}`);\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onPlay\", (...args)=>this.props.onPlay(...args));\n        __publicField(this, \"onPause\", (...args)=>this.props.onPause(...args));\n        __publicField(this, \"onSeek\", (...args)=>this.props.onSeek(...args));\n        __publicField(this, \"onEnded\", (...args)=>this.props.onEnded(...args));\n        __publicField(this, \"onPlaybackRateChange\", (...args)=>this.props.onPlaybackRateChange(...args));\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unmute\");\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        const { playing, muted, controls, onReady, config, onError } = this.props;\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Wistia2)=>{\n            if (config.customControls) {\n                config.customControls.forEach((control)=>Wistia2.defineControl(control));\n            }\n            window._wq = window._wq || [];\n            window._wq.push({\n                id: this.playerID,\n                options: {\n                    autoPlay: playing,\n                    silentAutoPlay: \"allow\",\n                    muted,\n                    controlsVisibleOnLoad: controls,\n                    fullscreenButton: controls,\n                    playbar: controls,\n                    playbackRateControl: controls,\n                    qualityControl: controls,\n                    volumeControl: controls,\n                    settingsControl: controls,\n                    smallPlayButton: controls,\n                    ...config.options\n                },\n                onReady: (player)=>{\n                    this.player = player;\n                    this.unbind();\n                    this.player.bind(\"play\", this.onPlay);\n                    this.player.bind(\"pause\", this.onPause);\n                    this.player.bind(\"seek\", this.onSeek);\n                    this.player.bind(\"end\", this.onEnded);\n                    this.player.bind(\"playbackratechange\", this.onPlaybackRateChange);\n                    onReady();\n                }\n            });\n        }, onError);\n    }\n    unbind() {\n        this.player.unbind(\"play\", this.onPlay);\n        this.player.unbind(\"pause\", this.onPause);\n        this.player.unbind(\"seek\", this.onSeek);\n        this.player.unbind(\"end\", this.onEnded);\n        this.player.unbind(\"playbackratechange\", this.onPlaybackRateChange);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.unbind();\n        this.callPlayer(\"remove\");\n    }\n    seekTo(seconds, keepPlaying = true) {\n        this.callPlayer(\"time\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"volume\", fraction);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"playbackRate\", rate);\n    }\n    getDuration() {\n        return this.callPlayer(\"duration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"time\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const { url } = this.props;\n        const videoID = url && url.match(import_patterns.MATCH_URL_WISTIA)[1];\n        const className = `wistia_embed wistia_async_${videoID}`;\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            id: this.playerID,\n            key: videoID,\n            className,\n            style\n        });\n    }\n}\n__publicField(Wistia, \"displayName\", \"Wistia\");\n__publicField(Wistia, \"canPlay\", import_patterns.canPlay.wistia);\n__publicField(Wistia, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1dpc3RpYS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsV0FBV0MsT0FBT0MsTUFBTTtBQUM1QixJQUFJQyxZQUFZRixPQUFPRyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkosT0FBT0ssd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQk4sT0FBT08sbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVSLE9BQU9TLGNBQWM7QUFDeEMsSUFBSUMsZUFBZVYsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNWixVQUFVWSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLFdBQVcsQ0FBQ0MsUUFBUUM7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmcEIsVUFBVW1CLFFBQVFFLE1BQU07UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxLQUFLO1FBQUVOLFlBQVk7SUFBSztBQUMvRDtBQUNBLElBQUlRLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSVosT0FBT1Qsa0JBQWtCcUIsTUFDaEMsSUFBSSxDQUFDakIsYUFBYW9CLElBQUksQ0FBQ0osSUFBSVgsUUFBUUEsUUFBUWEsUUFDekMxQixVQUFVd0IsSUFBSVgsS0FBSztZQUFFUyxLQUFLLElBQU1HLElBQUksQ0FBQ1osSUFBSTtZQUFFRSxZQUFZLENBQUVZLENBQUFBLE9BQU96QixpQkFBaUJ1QixNQUFNWixJQUFHLEtBQU1jLEtBQUtaLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9TO0FBQ1Q7QUFDQSxJQUFJSyxVQUFVLENB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QywwQkFBMEIsRUFBRUgsUUFBUSxDQUFDO1FBQ3hELE1BQU1JLFFBQVE7WUFDWkMsT0FBTztZQUNQQyxRQUFRO1FBQ1Y7UUFDQSxPQUFPLGFBQWEsR0FBRzVFLGFBQWFKLE9BQU8sQ0FBQ2lGLGFBQWEsQ0FBQyxPQUFPO1lBQUVyQyxJQUFJLElBQUksQ0FBQ0MsUUFBUTtZQUFFcEUsS0FBS2lHO1lBQVNHO1lBQVdDO1FBQU07SUFDdkg7QUFDRjtBQUNBaEYsY0FBY0csUUFBUSxlQUFlO0FBQ3JDSCxjQUFjRyxRQUFRLFdBQVdNLGdCQUFnQjJFLE9BQU8sQ0FBQ0MsTUFBTTtBQUMvRHJGLGNBQWNHLFFBQVEsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmVhbXZpYmUvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1dpc3RpYS5qcz9jZmFlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2QsIGlzTm9kZU1vZGUsIHRhcmdldCkgPT4gKHRhcmdldCA9IG1vZCAhPSBudWxsID8gX19jcmVhdGUoX19nZXRQcm90b09mKG1vZCkpIDoge30sIF9fY29weVByb3BzKFxuICAvLyBJZiB0aGUgaW1wb3J0ZXIgaXMgaW4gbm9kZSBjb21wYXRpYmlsaXR5IG1vZGUgb3IgdGhpcyBpcyBub3QgYW4gRVNNXG4gIC8vIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtXG4gIC8vIGNvbXBhdGlibGUgdHJhbnNmb3JtIChpLmUuIFwiX19lc01vZHVsZVwiIGhhcyBub3QgYmVlbiBzZXQpLCB0aGVuIHNldFxuICAvLyBcImRlZmF1bHRcIiB0byB0aGUgQ29tbW9uSlMgXCJtb2R1bGUuZXhwb3J0c1wiIGZvciBub2RlIGNvbXBhdGliaWxpdHkuXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBXaXN0aWFfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoV2lzdGlhX2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gV2lzdGlhXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKFdpc3RpYV9leHBvcnRzKTtcbnZhciBpbXBvcnRfcmVhY3QgPSBfX3RvRVNNKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIGltcG9ydF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcbmNvbnN0IFNES19VUkwgPSBcImh0dHBzOi8vZmFzdC53aXN0aWEuY29tL2Fzc2V0cy9leHRlcm5hbC9FLXYxLmpzXCI7XG5jb25zdCBTREtfR0xPQkFMID0gXCJXaXN0aWFcIjtcbmNvbnN0IFBMQVlFUl9JRF9QUkVGSVggPSBcIndpc3RpYS1wbGF5ZXItXCI7XG5jbGFzcyBXaXN0aWEgZXh0ZW5kcyBpbXBvcnRfcmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY2FsbFBsYXllclwiLCBpbXBvcnRfdXRpbHMuY2FsbFBsYXllcik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInBsYXllcklEXCIsIHRoaXMucHJvcHMuY29uZmlnLnBsYXllcklkIHx8IGAke1BMQVlFUl9JRF9QUkVGSVh9JHsoMCwgaW1wb3J0X3V0aWxzLnJhbmRvbVN0cmluZykoKX1gKTtcbiAgICAvLyBQcm94eSBtZXRob2RzIHRvIHByZXZlbnQgbGlzdGVuZXIgbGVha3NcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwib25QbGF5XCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uUGxheSguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uUGF1c2VcIiwgKC4uLmFyZ3MpID0+IHRoaXMucHJvcHMub25QYXVzZSguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm9uU2Vla1wiLCAoLi4uYXJncykgPT4gdGhpcy5wcm9wcy5vblNlZWsoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbkVuZGVkXCIsICguLi5hcmdzKSA9PiB0aGlzLnByb3BzLm9uRW5kZWQoLi4uYXJncykpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvblBsYXliYWNrUmF0ZUNoYW5nZVwiLCAoLi4uYXJncykgPT4gdGhpcy5wcm9wcy5vblBsYXliYWNrUmF0ZUNoYW5nZSguLi5hcmdzKSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIm11dGVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKFwibXV0ZVwiKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwidW5tdXRlXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcihcInVubXV0ZVwiKTtcbiAgICB9KTtcbiAgfVxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLm9uTW91bnQgJiYgdGhpcy5wcm9wcy5vbk1vdW50KHRoaXMpO1xuICB9XG4gIGxvYWQodXJsKSB7XG4gICAgY29uc3QgeyBwbGF5aW5nLCBtdXRlZCwgY29udHJvbHMsIG9uUmVhZHksIGNvbmZpZywgb25FcnJvciB9ID0gdGhpcy5wcm9wcztcbiAgICAoMCwgaW1wb3J0X3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbigoV2lzdGlhMikgPT4ge1xuICAgICAgaWYgKGNvbmZpZy5jdXN0b21Db250cm9scykge1xuICAgICAgICBjb25maWcuY3VzdG9tQ29udHJvbHMuZm9yRWFjaCgoY29udHJvbCkgPT4gV2lzdGlhMi5kZWZpbmVDb250cm9sKGNvbnRyb2wpKTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5fd3EgPSB3aW5kb3cuX3dxIHx8IFtdO1xuICAgICAgd2luZG93Ll93cS5wdXNoKHtcbiAgICAgICAgaWQ6IHRoaXMucGxheWVySUQsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhdXRvUGxheTogcGxheWluZyxcbiAgICAgICAgICBzaWxlbnRBdXRvUGxheTogXCJhbGxvd1wiLFxuICAgICAgICAgIG11dGVkLFxuICAgICAgICAgIGNvbnRyb2xzVmlzaWJsZU9uTG9hZDogY29udHJvbHMsXG4gICAgICAgICAgZnVsbHNjcmVlbkJ1dHRvbjogY29udHJvbHMsXG4gICAgICAgICAgcGxheWJhcjogY29udHJvbHMsXG4gICAgICAgICAgcGxheWJhY2tSYXRlQ29udHJvbDogY29udHJvbHMsXG4gICAgICAgICAgcXVhbGl0eUNvbnRyb2w6IGNvbnRyb2xzLFxuICAgICAgICAgIHZvbHVtZUNvbnRyb2w6IGNvbnRyb2xzLFxuICAgICAgICAgIHNldHRpbmdzQ29udHJvbDogY29udHJvbHMsXG4gICAgICAgICAgc21hbGxQbGF5QnV0dG9uOiBjb250cm9scyxcbiAgICAgICAgICAuLi5jb25maWcub3B0aW9uc1xuICAgICAgICB9LFxuICAgICAgICBvblJlYWR5OiAocGxheWVyKSA9PiB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgICB0aGlzLnBsYXllci5iaW5kKFwicGxheVwiLCB0aGlzLm9uUGxheSk7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuYmluZChcInBhdXNlXCIsIHRoaXMub25QYXVzZSk7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuYmluZChcInNlZWtcIiwgdGhpcy5vblNlZWspO1xuICAgICAgICAgIHRoaXMucGxheWVyLmJpbmQoXCJlbmRcIiwgdGhpcy5vbkVuZGVkKTtcbiAgICAgICAgICB0aGlzLnBsYXllci5iaW5kKFwicGxheWJhY2tyYXRlY2hhbmdlXCIsIHRoaXMub25QbGF5YmFja1JhdGVDaGFuZ2UpO1xuICAgICAgICAgIG9uUmVhZHkoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgb25FcnJvcik7XG4gIH1cbiAgdW5iaW5kKCkge1xuICAgIHRoaXMucGxheWVyLnVuYmluZChcInBsYXlcIiwgdGhpcy5vblBsYXkpO1xuICAgIHRoaXMucGxheWVyLnVuYmluZChcInBhdXNlXCIsIHRoaXMub25QYXVzZSk7XG4gICAgdGhpcy5wbGF5ZXIudW5iaW5kKFwic2Vla1wiLCB0aGlzLm9uU2Vlayk7XG4gICAgdGhpcy5wbGF5ZXIudW5iaW5kKFwiZW5kXCIsIHRoaXMub25FbmRlZCk7XG4gICAgdGhpcy5wbGF5ZXIudW5iaW5kKFwicGxheWJhY2tyYXRlY2hhbmdlXCIsIHRoaXMub25QbGF5YmFja1JhdGVDaGFuZ2UpO1xuICB9XG4gIHBsYXkoKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwicGxheVwiKTtcbiAgfVxuICBwYXVzZSgpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJwYXVzZVwiKTtcbiAgfVxuICBzdG9wKCkge1xuICAgIHRoaXMudW5iaW5kKCk7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwicmVtb3ZlXCIpO1xuICB9XG4gIHNlZWtUbyhzZWNvbmRzLCBrZWVwUGxheWluZyA9IHRydWUpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJ0aW1lXCIsIHNlY29uZHMpO1xuICAgIGlmICgha2VlcFBsYXlpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH1cbiAgc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwidm9sdW1lXCIsIGZyYWN0aW9uKTtcbiAgfVxuICBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInBsYXliYWNrUmF0ZVwiLCByYXRlKTtcbiAgfVxuICBnZXREdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKFwiZHVyYXRpb25cIik7XG4gIH1cbiAgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcihcInRpbWVcIik7XG4gIH1cbiAgZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1cmwgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdmlkZW9JRCA9IHVybCAmJiB1cmwubWF0Y2goaW1wb3J0X3BhdHRlcm5zLk1BVENIX1VSTF9XSVNUSUEpWzFdO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGB3aXN0aWFfZW1iZWQgd2lzdGlhX2FzeW5jXyR7dmlkZW9JRH1gO1xuICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgIH07XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBpbXBvcnRfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgaWQ6IHRoaXMucGxheWVySUQsIGtleTogdmlkZW9JRCwgY2xhc3NOYW1lLCBzdHlsZSB9KTtcbiAgfVxufVxuX19wdWJsaWNGaWVsZChXaXN0aWEsIFwiZGlzcGxheU5hbWVcIiwgXCJXaXN0aWFcIik7XG5fX3B1YmxpY0ZpZWxkKFdpc3RpYSwgXCJjYW5QbGF5XCIsIGltcG9ydF9wYXR0ZXJucy5jYW5QbGF5Lndpc3RpYSk7XG5fX3B1YmxpY0ZpZWxkKFdpc3RpYSwgXCJsb29wT25FbmRlZFwiLCB0cnVlKTtcbiJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImNhbGwiLCJfX3RvRVNNIiwibW9kIiwiaXNOb2RlTW9kZSIsIl9fZXNNb2R1bGUiLCJfX3RvQ29tbW9uSlMiLCJfX3B1YmxpY0ZpZWxkIiwiV2lzdGlhX2V4cG9ydHMiLCJkZWZhdWx0IiwiV2lzdGlhIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRfdXRpbHMiLCJpbXBvcnRfcGF0dGVybnMiLCJTREtfVVJMIiwiU0RLX0dMT0JBTCIsIlBMQVlFUl9JRF9QUkVGSVgiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNhbGxQbGF5ZXIiLCJwcm9wcyIsImNvbmZpZyIsInBsYXllcklkIiwicmFuZG9tU3RyaW5nIiwiYXJncyIsIm9uUGxheSIsIm9uUGF1c2UiLCJvblNlZWsiLCJvbkVuZGVkIiwib25QbGF5YmFja1JhdGVDaGFuZ2UiLCJjb21wb25lbnREaWRNb3VudCIsIm9uTW91bnQiLCJsb2FkIiwidXJsIiwicGxheWluZyIsIm11dGVkIiwiY29udHJvbHMiLCJvblJlYWR5Iiwib25FcnJvciIsImdldFNESyIsInRoZW4iLCJXaXN0aWEyIiwiY3VzdG9tQ29udHJvbHMiLCJmb3JFYWNoIiwiY29udHJvbCIsImRlZmluZUNvbnRyb2wiLCJ3aW5kb3ciLCJfd3EiLCJwdXNoIiwiaWQiLCJwbGF5ZXJJRCIsIm9wdGlvbnMiLCJhdXRvUGxheSIsInNpbGVudEF1dG9QbGF5IiwiY29udHJvbHNWaXNpYmxlT25Mb2FkIiwiZnVsbHNjcmVlbkJ1dHRvbiIsInBsYXliYXIiLCJwbGF5YmFja1JhdGVDb250cm9sIiwicXVhbGl0eUNvbnRyb2wiLCJ2b2x1bWVDb250cm9sIiwic2V0dGluZ3NDb250cm9sIiwic21hbGxQbGF5QnV0dG9uIiwicGxheWVyIiwidW5iaW5kIiwiYmluZCIsInBsYXkiLCJwYXVzZSIsInN0b3AiLCJzZWVrVG8iLCJzZWNvbmRzIiwia2VlcFBsYXlpbmciLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJnZXREdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwiZ2V0U2Vjb25kc0xvYWRlZCIsInJlbmRlciIsInZpZGVvSUQiLCJtYXRjaCIsIk1BVENIX1VSTF9XSVNUSUEiLCJjbGFzc05hbWUiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlRWxlbWVudCIsImNhblBsYXkiLCJ3aXN0aWEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Wistia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar YouTube_exports = {};\n__export(YouTube_exports, {\n    default: ()=>YouTube\n});\nmodule.exports = __toCommonJS(YouTube_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nconst SDK_URL = \"https://www.youtube.com/iframe_api\";\nconst SDK_GLOBAL = \"YT\";\nconst SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nconst NOCOOKIE_HOST = \"https://www.youtube-nocookie.com\";\nclass YouTube extends import_react.Component {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"parsePlaylist\", (url)=>{\n            if (url instanceof Array) {\n                return {\n                    listType: \"playlist\",\n                    playlist: url.map(this.getID).join(\",\")\n                };\n            }\n            if (MATCH_PLAYLIST.test(url)) {\n                const [, playlistId] = url.match(MATCH_PLAYLIST);\n                return {\n                    listType: \"playlist\",\n                    list: playlistId.replace(/^UC/, \"UU\")\n                };\n            }\n            if (MATCH_USER_UPLOADS.test(url)) {\n                const [, username] = url.match(MATCH_USER_UPLOADS);\n                return {\n                    listType: \"user_uploads\",\n                    list: username\n                };\n            }\n            return {};\n        });\n        __publicField(this, \"onStateChange\", (event)=>{\n            const { data } = event;\n            const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop, config: { playerVars, onUnstarted } } = this.props;\n            const { UNSTARTED, PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState;\n            if (data === UNSTARTED) onUnstarted();\n            if (data === PLAYING) {\n                onPlay();\n                onBufferEnd();\n            }\n            if (data === PAUSED) onPause();\n            if (data === BUFFERING) onBuffer();\n            if (data === ENDED) {\n                const isPlaylist = !!this.callPlayer(\"getPlaylist\");\n                if (loop && !isPlaylist) {\n                    if (playerVars.start) {\n                        this.seekTo(playerVars.start);\n                    } else {\n                        this.play();\n                    }\n                }\n                onEnded();\n            }\n            if (data === CUED) onReady();\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"mute\");\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"unMute\");\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    getID(url) {\n        if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n            return null;\n        }\n        return url.match(import_patterns.MATCH_URL_YOUTUBE)[1];\n    }\n    load(url, isReady) {\n        const { playing, muted, playsinline, controls, loop, config, onError } = this.props;\n        const { playerVars, embedOptions } = config;\n        const id = this.getID(url);\n        if (isReady) {\n            if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n                this.player.loadPlaylist(this.parsePlaylist(url));\n                return;\n            }\n            this.player.cueVideoById({\n                videoId: id,\n                startSeconds: (0, import_utils.parseStartTime)(url) || playerVars.start,\n                endSeconds: (0, import_utils.parseEndTime)(url) || playerVars.end\n            });\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, (YT)=>YT.loaded).then((YT)=>{\n            if (!this.container) return;\n            this.player = new YT.Player(this.container, {\n                width: \"100%\",\n                height: \"100%\",\n                videoId: id,\n                playerVars: {\n                    autoplay: playing ? 1 : 0,\n                    mute: muted ? 1 : 0,\n                    controls: controls ? 1 : 0,\n                    start: (0, import_utils.parseStartTime)(url),\n                    end: (0, import_utils.parseEndTime)(url),\n                    origin: window.location.origin,\n                    playsinline: playsinline ? 1 : 0,\n                    ...this.parsePlaylist(url),\n                    ...playerVars\n                },\n                events: {\n                    onReady: ()=>{\n                        if (loop) {\n                            this.player.setLoop(true);\n                        }\n                        this.props.onReady();\n                    },\n                    onPlaybackRateChange: (event)=>this.props.onPlaybackRateChange(event.data),\n                    onPlaybackQualityChange: (event)=>this.props.onPlaybackQualityChange(event),\n                    onStateChange: this.onStateChange,\n                    onError: (event)=>onError(event.data)\n                },\n                host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : void 0,\n                ...embedOptions\n            });\n        }, onError);\n        if (embedOptions.events) {\n            console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause\");\n        }\n    }\n    play() {\n        this.callPlayer(\"playVideo\");\n    }\n    pause() {\n        this.callPlayer(\"pauseVideo\");\n    }\n    stop() {\n        if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n        this.callPlayer(\"stopVideo\");\n    }\n    seekTo(amount, keepPlaying = false) {\n        this.callPlayer(\"seekTo\", amount);\n        if (!keepPlaying && !this.props.playing) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction * 100);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackRate\", rate);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentTime\");\n    }\n    getSecondsLoaded() {\n        return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style\n        }, /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            ref: this.ref\n        }));\n    }\n}\n__publicField(YouTube, \"displayName\", \"YouTube\");\n__publicField(YouTube, \"canPlay\", import_patterns.canPlay.youtube);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/YouTube.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar players_exports = {};\n__export(players_exports, {\n    default: ()=>players_default\n});\nmodule.exports = __toCommonJS(players_exports);\nvar import_utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nvar players_default = [\n    {\n        key: \"youtube\",\n        name: \"YouTube\",\n        canPlay: import_patterns.canPlay.youtube,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerYouTube */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\", 23)))\n    },\n    {\n        key: \"soundcloud\",\n        name: \"SoundCloud\",\n        canPlay: import_patterns.canPlay.soundcloud,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerSoundCloud */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\", 23)))\n    },\n    {\n        key: \"vimeo\",\n        name: \"Vimeo\",\n        canPlay: import_patterns.canPlay.vimeo,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerVimeo */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\", 23)))\n    },\n    {\n        key: \"mux\",\n        name: \"Mux\",\n        canPlay: import_patterns.canPlay.mux,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerMux */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Mux */ \"(ssr)/./node_modules/react-player/lib/players/Mux.js\", 23)))\n    },\n    {\n        key: \"facebook\",\n        name: \"Facebook\",\n        canPlay: import_patterns.canPlay.facebook,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerFacebook */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Facebook */ \"(ssr)/./node_modules/react-player/lib/players/Facebook.js\", 23)))\n    },\n    {\n        key: \"streamable\",\n        name: \"Streamable\",\n        canPlay: import_patterns.canPlay.streamable,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerStreamable */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Streamable */ \"(ssr)/./node_modules/react-player/lib/players/Streamable.js\", 23)))\n    },\n    {\n        key: \"wistia\",\n        name: \"Wistia\",\n        canPlay: import_patterns.canPlay.wistia,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerWistia */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Wistia */ \"(ssr)/./node_modules/react-player/lib/players/Wistia.js\", 23)))\n    },\n    {\n        key: \"twitch\",\n        name: \"Twitch\",\n        canPlay: import_patterns.canPlay.twitch,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerTwitch */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Twitch */ \"(ssr)/./node_modules/react-player/lib/players/Twitch.js\", 23)))\n    },\n    {\n        key: \"dailymotion\",\n        name: \"DailyMotion\",\n        canPlay: import_patterns.canPlay.dailymotion,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerDailyMotion */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\", 23)))\n    },\n    {\n        key: \"mixcloud\",\n        name: \"Mixcloud\",\n        canPlay: import_patterns.canPlay.mixcloud,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerMixcloud */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Mixcloud */ \"(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\", 23)))\n    },\n    {\n        key: \"vidyard\",\n        name: \"Vidyard\",\n        canPlay: import_patterns.canPlay.vidyard,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerVidyard */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Vidyard */ \"(ssr)/./node_modules/react-player/lib/players/Vidyard.js\", 23)))\n    },\n    {\n        key: \"kaltura\",\n        name: \"Kaltura\",\n        canPlay: import_patterns.canPlay.kaltura,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerKaltura */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Kaltura */ \"(ssr)/./node_modules/react-player/lib/players/Kaltura.js\", 23)))\n    },\n    {\n        key: \"file\",\n        name: \"FilePlayer\",\n        canPlay: import_patterns.canPlay.file,\n        canEnablePIP: (url)=>{\n            return import_patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, import_utils.supportsWebKitPresentationMode)()) && !import_patterns.AUDIO_EXTENSIONS.test(url);\n        },\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerFilePlayer */ \"vendor-chunks/react-player\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./FilePlayer */ \"(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\", 23)))\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar props_exports = {};\n__export(props_exports, {\n    defaultProps: ()=>defaultProps,\n    propTypes: ()=>propTypes\n});\nmodule.exports = __toCommonJS(props_exports);\nvar import_prop_types = __toESM(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nconst { string, bool, number, array, oneOfType, shape, object, func, node } = import_prop_types.default;\nconst propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    stopOnUnmount: bool,\n    light: oneOfType([\n        bool,\n        string,\n        object\n    ]),\n    playIcon: node,\n    previewTabIndex: number,\n    previewAriaLabel: string,\n    fallback: node,\n    oEmbedUrl: string,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            onUnstarted: func\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string,\n            attributes: object\n        }),\n        dailymotion: shape({\n            params: object\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            title: string\n        }),\n        mux: shape({\n            attributes: object,\n            version: string\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceSafariHLS: bool,\n            forceDisableHls: bool,\n            forceDASH: bool,\n            forceFLV: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string,\n            flvVersion: string\n        }),\n        wistia: shape({\n            options: object,\n            playerId: string,\n            customControls: array\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        }),\n        vidyard: shape({\n            options: object\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onPlaybackRateChange: func,\n    onPlaybackQualityChange: func,\n    onProgress: func,\n    onClickPreview: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nconst noop = ()=>{};\nconst defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1e3,\n    playsinline: false,\n    pip: false,\n    stopOnUnmount: true,\n    light: false,\n    fallback: null,\n    wrapper: \"div\",\n    previewTabIndex: 0,\n    previewAriaLabel: \"\",\n    oEmbedUrl: \"https://noembed.com/embed?url={url}\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            onUnstarted: noop\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null,\n            attributes: {}\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            }\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            title: null\n        },\n        mux: {\n            attributes: {},\n            version: \"2\"\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            forceFLV: false,\n            hlsOptions: {},\n            hlsVersion: \"1.1.4\",\n            dashVersion: \"3.1.3\",\n            flvVersion: \"1.5.0\",\n            forceDisableHls: false\n        },\n        wistia: {\n            options: {},\n            playerId: null,\n            customControls: null\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        },\n        vidyard: {\n            options: {}\n        }\n    },\n    onReady: noop,\n    onStart: noop,\n    onPlay: noop,\n    onPause: noop,\n    onBuffer: noop,\n    onBufferEnd: noop,\n    onEnded: noop,\n    onError: noop,\n    onDuration: noop,\n    onSeek: noop,\n    onPlaybackRateChange: noop,\n    onPlaybackQualityChange: noop,\n    onProgress: noop,\n    onClickPreview: noop,\n    onEnablePIP: noop,\n    onDisablePIP: noop\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n    callPlayer: ()=>callPlayer,\n    getConfig: ()=>getConfig,\n    getSDK: ()=>getSDK,\n    isBlobUrl: ()=>isBlobUrl,\n    isMediaStream: ()=>isMediaStream,\n    lazy: ()=>lazy,\n    omit: ()=>omit,\n    parseEndTime: ()=>parseEndTime,\n    parseStartTime: ()=>parseStartTime,\n    queryString: ()=>queryString,\n    randomString: ()=>randomString,\n    supportsWebKitPresentationMode: ()=>supportsWebKitPresentationMode\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_load_script = __toESM(__webpack_require__(/*! load-script */ \"(ssr)/./node_modules/load-script/index.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nconst lazy = (componentImportFn)=>import_react.default.lazy(async ()=>{\n        const obj = await componentImportFn();\n        return typeof obj.default === \"function\" ? obj : obj.default;\n    });\nconst MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nconst MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nconst MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nconst MATCH_NUMERIC = /^\\d+$/;\nfunction parseTimeParam(url, pattern) {\n    if (url instanceof Array) {\n        return void 0;\n    }\n    const match = url.match(pattern);\n    if (match) {\n        const stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return void 0;\n}\nfunction parseTimeString(stamp) {\n    let seconds = 0;\n    let array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        const [, count, period] = array;\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n}\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map((key)=>`${key}=${object[key]}`).join(\"&\");\n}\nfunction getGlobal(key) {\n    if (window[key]) {\n        return window[key];\n    }\n    if (window.exports && window.exports[key]) {\n        return window.exports[key];\n    }\n    if (window.module && window.module.exports && window.module.exports[key]) {\n        return window.module.exports[key];\n    }\n    return null;\n}\nconst requests = {};\nconst getSDK = enableStubOn(function getSDK2(url, sdkGlobal, sdkReady = null, isLoaded = ()=>true, fetchScript = import_load_script.default) {\n    const existingGlobal = getGlobal(sdkGlobal);\n    if (existingGlobal && isLoaded(existingGlobal)) {\n        return Promise.resolve(existingGlobal);\n    }\n    return new Promise((resolve, reject)=>{\n        if (requests[url]) {\n            requests[url].push({\n                resolve,\n                reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve,\n                reject\n            }\n        ];\n        const onLoaded = (sdk)=>{\n            requests[url].forEach((request)=>request.resolve(sdk));\n        };\n        if (sdkReady) {\n            const previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(getGlobal(sdkGlobal));\n            };\n        }\n        fetchScript(url, (err)=>{\n            if (err) {\n                requests[url].forEach((request)=>request.reject(err));\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(getGlobal(sdkGlobal));\n            }\n        });\n    });\n});\nfunction getConfig(props, defaultProps) {\n    return (0, import_deepmerge.default)(defaultProps.config, props.config);\n}\nfunction omit(object, ...arrays) {\n    const omitKeys = [].concat(...arrays);\n    const output = {};\n    const keys = Object.keys(object);\n    for (const key of keys){\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method, ...args) {\n    if (!this.player || !this.player[method]) {\n        let message = `ReactPlayer: ${this.constructor.displayName} player could not call %c${method}%c \\u2013 `;\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    return this.player[method](...args);\n}\nfunction isMediaStream(url) {\n    return  false && 0;\n}\nfunction isBlobUrl(url) {\n    return /^blob:/.test(url);\n}\nfunction supportsWebKitPresentationMode(video = document.createElement(\"video\")) {\n    const notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && notMobile;\n}\nfunction enableStubOn(fn) {\n    if (false) {}\n    return fn;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/utils.js\n");

/***/ })

};
;