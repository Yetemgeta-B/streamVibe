"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("reactPlayerVimeo",{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/Vimeo.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Vimeo.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Vimeo_exports = {};\n__export(Vimeo_exports, {\n    default: ()=>Vimeo\n});\nmodule.exports = __toCommonJS(Vimeo_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nconst SDK_URL = \"https://player.vimeo.com/api/player.js\";\nconst SDK_GLOBAL = \"Vimeo\";\nconst cleanUrl = (url)=>{\n    return url.replace(\"/manage/videos\", \"\");\n};\nclass Vimeo extends import_react.Component {\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url) {\n        this.duration = null;\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Vimeo2)=>{\n            if (!this.container) return;\n            const { playerOptions, title } = this.props.config;\n            this.player = new Vimeo2.Player(this.container, {\n                url: cleanUrl(url),\n                autoplay: this.props.playing,\n                muted: this.props.muted,\n                loop: this.props.loop,\n                playsinline: this.props.playsinline,\n                controls: this.props.controls,\n                ...playerOptions\n            });\n            this.player.ready().then(()=>{\n                const iframe = this.container.querySelector(\"iframe\");\n                iframe.style.width = \"100%\";\n                iframe.style.height = \"100%\";\n                if (title) {\n                    iframe.title = title;\n                }\n            }).catch(this.props.onError);\n            this.player.on(\"loaded\", ()=>{\n                this.props.onReady();\n                this.refreshDuration();\n            });\n            this.player.on(\"play\", ()=>{\n                this.props.onPlay();\n                this.refreshDuration();\n            });\n            this.player.on(\"pause\", this.props.onPause);\n            this.player.on(\"seeked\", (e)=>this.props.onSeek(e.seconds));\n            this.player.on(\"ended\", this.props.onEnded);\n            this.player.on(\"error\", this.props.onError);\n            this.player.on(\"timeupdate\", (param)=>{\n                let { seconds } = param;\n                this.currentTime = seconds;\n            });\n            this.player.on(\"progress\", (param)=>{\n                let { seconds } = param;\n                this.secondsLoaded = seconds;\n            });\n            this.player.on(\"bufferstart\", this.props.onBuffer);\n            this.player.on(\"bufferend\", this.props.onBufferEnd);\n            this.player.on(\"playbackratechange\", (e)=>this.props.onPlaybackRateChange(e.playbackRate));\n        }, this.props.onError);\n    }\n    refreshDuration() {\n        this.player.getDuration().then((duration)=>{\n            this.duration = duration;\n        });\n    }\n    play() {\n        const promise = this.callPlayer(\"play\");\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.callPlayer(\"unload\");\n    }\n    seekTo(seconds) {\n        let keepPlaying = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        this.callPlayer(\"setCurrentTime\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    setMuted(muted) {\n        this.callPlayer(\"setMuted\", muted);\n    }\n    setLoop(loop) {\n        this.callPlayer(\"setLoop\", loop);\n    }\n    setPlaybackRate(rate) {\n        this.callPlayer(\"setPlaybackRate\", rate);\n    }\n    getDuration() {\n        return this.duration;\n    }\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    getSecondsLoaded() {\n        return this.secondsLoaded;\n    }\n    render() {\n        const { display } = this.props;\n        const style = {\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            display\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            key: this.props.url,\n            ref: this.ref,\n            style\n        });\n    }\n    constructor(){\n        super(...arguments);\n        // Prevent checking isLoading when URL changes\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"duration\", null);\n        __publicField(this, \"currentTime\", null);\n        __publicField(this, \"secondsLoaded\", null);\n        __publicField(this, \"mute\", ()=>{\n            this.setMuted(true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.setMuted(false);\n        });\n        __publicField(this, \"ref\", (container)=>{\n            this.container = container;\n        });\n    }\n}\n__publicField(Vimeo, \"displayName\", \"Vimeo\");\n__publicField(Vimeo, \"canPlay\", import_patterns.canPlay.vimeo);\n__publicField(Vimeo, \"forceLoad\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGF6eS9wbGF5ZXJzL1ZpbWVvLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxXQUFXQyxPQUFPQyxNQUFNO0FBQzVCLElBQUlDLFlBQVlGLE9BQU9HLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CSixPQUFPSyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CTixPQUFPTyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZVIsT0FBT1MsY0FBYztBQUN4QyxJQUFJQyxlQUFlVixPQUFPVyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1aLFVBQVVZLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksV0FBVyxDQUFDQyxRQUFRQztJQUN0QixJQUFLLElBQUlDLFFBQVFELElBQ2ZwQixVQUFVbUIsUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRU4sWUFBWTtJQUFLO0FBQy9EO0FBQ0EsSUFBSVEsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJWixPQUFPVCxrQkFBa0JxQixNQUNoQyxJQUFJLENBQUNqQixhQUFhb0IsSUFBSSxDQUFDSixJQUFJWCxRQUFRQSxRQUFRYSxRQUN6QzFCLFVBQVV3QixJQUFJWCxLQUFLO1lBQUVTLEtBQUssSUFBTUcsSUFBSSxDQUFDWixJQUFJO1lBQUVFLFlBQVksQ0FBRVksQ0FBQUEsT0FBT3pCLGlCQUFpQnVCLE1BQU1aLElBQUcsS0FBTWMsS0FBS1osVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT1M7QUFDVDtBQUNB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QUUsR0FBRyxJQUFJLENBQUMzRCxLQUFLO1FBQzlCLE1BQU1zQixRQUFRO1lBQ1pDLE9BQU87WUFDUEMsUUFBUTtZQUNSb0MsVUFBVTtZQUNWRDtRQUNGO1FBQ0EsT0FBTyxhQUFhLEdBQUd0RSxhQUFhSixPQUFPLENBQUM0RSxhQUFhLENBQ3ZELE9BQ0E7WUFDRW5HLEtBQUssSUFBSSxDQUFDc0MsS0FBSyxDQUFDSixHQUFHO1lBQ25Ca0UsS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFDYnhDO1FBQ0Y7SUFFSjtJQTlIQXlDLGFBQWM7UUFDWixLQUFLLElBQUlDO1FBQ1QsOENBQThDO1FBQzlDakYsY0FBYyxJQUFJLEVBQUUsY0FBY1EsYUFBYXNELFVBQVU7UUFDekQ5RCxjQUFjLElBQUksRUFBRSxZQUFZO1FBQ2hDQSxjQUFjLElBQUksRUFBRSxlQUFlO1FBQ25DQSxjQUFjLElBQUksRUFBRSxpQkFBaUI7UUFDckNBLGNBQWMsSUFBSSxFQUFFLFFBQVE7WUFDMUIsSUFBSSxDQUFDcUUsUUFBUSxDQUFDO1FBQ2hCO1FBQ0FyRSxjQUFjLElBQUksRUFBRSxVQUFVO1lBQzVCLElBQUksQ0FBQ3FFLFFBQVEsQ0FBQztRQUNoQjtRQUNBckUsY0FBYyxJQUFJLEVBQUUsT0FBTyxDQUFDd0I7WUFDMUIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO1FBQ25CO0lBQ0Y7QUErR0Y7QUFDQXhCLGNBQWNHLE9BQU8sZUFBZTtBQUNwQ0gsY0FBY0csT0FBTyxXQUFXTSxnQkFBZ0J5RSxPQUFPLENBQUNDLEtBQUs7QUFDN0RuRixjQUFjRyxPQUFPLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9sYXp5L3BsYXllcnMvVmltZW8uanM/MjMwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgVmltZW9fZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoVmltZW9fZXhwb3J0cywge1xuICBkZWZhdWx0OiAoKSA9PiBWaW1lb1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhWaW1lb19leHBvcnRzKTtcbnZhciBpbXBvcnRfcmVhY3QgPSBfX3RvRVNNKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgaW1wb3J0X3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIGltcG9ydF9wYXR0ZXJucyA9IHJlcXVpcmUoXCIuLi9wYXR0ZXJuc1wiKTtcbmNvbnN0IFNES19VUkwgPSBcImh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzXCI7XG5jb25zdCBTREtfR0xPQkFMID0gXCJWaW1lb1wiO1xuY29uc3QgY2xlYW5VcmwgPSAodXJsKSA9PiB7XG4gIHJldHVybiB1cmwucmVwbGFjZShcIi9tYW5hZ2UvdmlkZW9zXCIsIFwiXCIpO1xufTtcbmNsYXNzIFZpbWVvIGV4dGVuZHMgaW1wb3J0X3JlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgLy8gUHJldmVudCBjaGVja2luZyBpc0xvYWRpbmcgd2hlbiBVUkwgY2hhbmdlc1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjYWxsUGxheWVyXCIsIGltcG9ydF91dGlscy5jYWxsUGxheWVyKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiZHVyYXRpb25cIiwgbnVsbCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImN1cnJlbnRUaW1lXCIsIG51bGwpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJzZWNvbmRzTG9hZGVkXCIsIG51bGwpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtdXRlXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc2V0TXV0ZWQodHJ1ZSk7XG4gICAgfSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInVubXV0ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNldE11dGVkKGZhbHNlKTtcbiAgICB9KTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVmXCIsIChjb250YWluZXIpID0+IHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH0pO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMub25Nb3VudCAmJiB0aGlzLnByb3BzLm9uTW91bnQodGhpcyk7XG4gIH1cbiAgbG9hZCh1cmwpIHtcbiAgICB0aGlzLmR1cmF0aW9uID0gbnVsbDtcbiAgICAoMCwgaW1wb3J0X3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbigoVmltZW8yKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuY29udGFpbmVyKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCB7IHBsYXllck9wdGlvbnMsIHRpdGxlIH0gPSB0aGlzLnByb3BzLmNvbmZpZztcbiAgICAgIHRoaXMucGxheWVyID0gbmV3IFZpbWVvMi5QbGF5ZXIodGhpcy5jb250YWluZXIsIHtcbiAgICAgICAgdXJsOiBjbGVhblVybCh1cmwpLFxuICAgICAgICBhdXRvcGxheTogdGhpcy5wcm9wcy5wbGF5aW5nLFxuICAgICAgICBtdXRlZDogdGhpcy5wcm9wcy5tdXRlZCxcbiAgICAgICAgbG9vcDogdGhpcy5wcm9wcy5sb29wLFxuICAgICAgICBwbGF5c2lubGluZTogdGhpcy5wcm9wcy5wbGF5c2lubGluZSxcbiAgICAgICAgY29udHJvbHM6IHRoaXMucHJvcHMuY29udHJvbHMsXG4gICAgICAgIC4uLnBsYXllck9wdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wbGF5ZXIucmVhZHkoKS50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc3QgaWZyYW1lID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcihcImlmcmFtZVwiKTtcbiAgICAgICAgaWZyYW1lLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgICAgaWZyYW1lLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgICB0aGlzLnBsYXllci5vbihcImxvYWRlZFwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZWFkeSgpO1xuICAgICAgICB0aGlzLnJlZnJlc2hEdXJhdGlvbigpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnBsYXllci5vbihcInBsYXlcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uUGxheSgpO1xuICAgICAgICB0aGlzLnJlZnJlc2hEdXJhdGlvbigpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnBsYXllci5vbihcInBhdXNlXCIsIHRoaXMucHJvcHMub25QYXVzZSk7XG4gICAgICB0aGlzLnBsYXllci5vbihcInNlZWtlZFwiLCAoZSkgPT4gdGhpcy5wcm9wcy5vblNlZWsoZS5zZWNvbmRzKSk7XG4gICAgICB0aGlzLnBsYXllci5vbihcImVuZGVkXCIsIHRoaXMucHJvcHMub25FbmRlZCk7XG4gICAgICB0aGlzLnBsYXllci5vbihcImVycm9yXCIsIHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgICB0aGlzLnBsYXllci5vbihcInRpbWV1cGRhdGVcIiwgKHsgc2Vjb25kcyB9KSA9PiB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnBsYXllci5vbihcInByb2dyZXNzXCIsICh7IHNlY29uZHMgfSkgPT4ge1xuICAgICAgICB0aGlzLnNlY29uZHNMb2FkZWQgPSBzZWNvbmRzO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnBsYXllci5vbihcImJ1ZmZlcnN0YXJ0XCIsIHRoaXMucHJvcHMub25CdWZmZXIpO1xuICAgICAgdGhpcy5wbGF5ZXIub24oXCJidWZmZXJlbmRcIiwgdGhpcy5wcm9wcy5vbkJ1ZmZlckVuZCk7XG4gICAgICB0aGlzLnBsYXllci5vbihcInBsYXliYWNrcmF0ZWNoYW5nZVwiLCAoZSkgPT4gdGhpcy5wcm9wcy5vblBsYXliYWNrUmF0ZUNoYW5nZShlLnBsYXliYWNrUmF0ZSkpO1xuICAgIH0sIHRoaXMucHJvcHMub25FcnJvcik7XG4gIH1cbiAgcmVmcmVzaER1cmF0aW9uKCkge1xuICAgIHRoaXMucGxheWVyLmdldER1cmF0aW9uKCkudGhlbigoZHVyYXRpb24pID0+IHtcbiAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9KTtcbiAgfVxuICBwbGF5KCkge1xuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmNhbGxQbGF5ZXIoXCJwbGF5XCIpO1xuICAgIGlmIChwcm9taXNlKSB7XG4gICAgICBwcm9taXNlLmNhdGNoKHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgfVxuICB9XG4gIHBhdXNlKCkge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInBhdXNlXCIpO1xuICB9XG4gIHN0b3AoKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwidW5sb2FkXCIpO1xuICB9XG4gIHNlZWtUbyhzZWNvbmRzLCBrZWVwUGxheWluZyA9IHRydWUpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJzZXRDdXJyZW50VGltZVwiLCBzZWNvbmRzKTtcbiAgICBpZiAoIWtlZXBQbGF5aW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuICB9XG4gIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNldFZvbHVtZVwiLCBmcmFjdGlvbik7XG4gIH1cbiAgc2V0TXV0ZWQobXV0ZWQpIHtcbiAgICB0aGlzLmNhbGxQbGF5ZXIoXCJzZXRNdXRlZFwiLCBtdXRlZCk7XG4gIH1cbiAgc2V0TG9vcChsb29wKSB7XG4gICAgdGhpcy5jYWxsUGxheWVyKFwic2V0TG9vcFwiLCBsb29wKTtcbiAgfVxuICBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgIHRoaXMuY2FsbFBsYXllcihcInNldFBsYXliYWNrUmF0ZVwiLCByYXRlKTtcbiAgfVxuICBnZXREdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kdXJhdGlvbjtcbiAgfVxuICBnZXRDdXJyZW50VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZTtcbiAgfVxuICBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnNlY29uZHNMb2FkZWQ7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGlzcGxheSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgIGRpc3BsYXlcbiAgICB9O1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gaW1wb3J0X3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7XG4gICAgICAgIGtleTogdGhpcy5wcm9wcy51cmwsXG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHN0eWxlXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuX19wdWJsaWNGaWVsZChWaW1lbywgXCJkaXNwbGF5TmFtZVwiLCBcIlZpbWVvXCIpO1xuX19wdWJsaWNGaWVsZChWaW1lbywgXCJjYW5QbGF5XCIsIGltcG9ydF9wYXR0ZXJucy5jYW5QbGF5LnZpbWVvKTtcbl9fcHVibGljRmllbGQoVmltZW8sIFwiZm9yY2VMb2FkXCIsIHRydWUpO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlIiwiT2JqZWN0IiwiY3JlYXRlIiwiX19kZWZQcm9wIiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19nZXRQcm90b09mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZ2V0IiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwiY2FsbCIsIl9fdG9FU00iLCJtb2QiLCJpc05vZGVNb2RlIiwiX19lc01vZHVsZSIsIl9fdG9Db21tb25KUyIsIl9fcHVibGljRmllbGQiLCJWaW1lb19leHBvcnRzIiwiZGVmYXVsdCIsIlZpbWVvIiwibW9kdWxlIiwiZXhwb3J0cyIsImltcG9ydF9yZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRfdXRpbHMiLCJpbXBvcnRfcGF0dGVybnMiLCJTREtfVVJMIiwiU0RLX0dMT0JBTCIsImNsZWFuVXJsIiwidXJsIiwicmVwbGFjZSIsIkNvbXBvbmVudCIsImNvbXBvbmVudERpZE1vdW50IiwicHJvcHMiLCJvbk1vdW50IiwibG9hZCIsImR1cmF0aW9uIiwiZ2V0U0RLIiwidGhlbiIsIlZpbWVvMiIsImNvbnRhaW5lciIsInBsYXllck9wdGlvbnMiLCJ0aXRsZSIsImNvbmZpZyIsInBsYXllciIsIlBsYXllciIsImF1dG9wbGF5IiwicGxheWluZyIsIm11dGVkIiwibG9vcCIsInBsYXlzaW5saW5lIiwiY29udHJvbHMiLCJyZWFkeSIsImlmcmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2F0Y2giLCJvbkVycm9yIiwib24iLCJvblJlYWR5IiwicmVmcmVzaER1cmF0aW9uIiwib25QbGF5Iiwib25QYXVzZSIsImUiLCJvblNlZWsiLCJzZWNvbmRzIiwib25FbmRlZCIsImN1cnJlbnRUaW1lIiwic2Vjb25kc0xvYWRlZCIsIm9uQnVmZmVyIiwib25CdWZmZXJFbmQiLCJvblBsYXliYWNrUmF0ZUNoYW5nZSIsInBsYXliYWNrUmF0ZSIsImdldER1cmF0aW9uIiwicGxheSIsInByb21pc2UiLCJjYWxsUGxheWVyIiwicGF1c2UiLCJzdG9wIiwic2Vla1RvIiwia2VlcFBsYXlpbmciLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsInNldE11dGVkIiwic2V0TG9vcCIsInNldFBsYXliYWNrUmF0ZSIsInJhdGUiLCJnZXRDdXJyZW50VGltZSIsImdldFNlY29uZHNMb2FkZWQiLCJyZW5kZXIiLCJkaXNwbGF5Iiwib3ZlcmZsb3ciLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJjYW5QbGF5IiwidmltZW8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/Vimeo.js\n"));

/***/ })

});