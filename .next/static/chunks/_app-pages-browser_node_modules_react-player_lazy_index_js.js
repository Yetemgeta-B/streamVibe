"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_react-player_lazy_index_js"],{

/***/ "(app-pages-browser)/./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar isMergeableObject = function isMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n    return !!value && typeof value === \"object\";\n}\nfunction isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\" || isReactElement(value);\n}\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === \"function\" && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\"react.element\") : 0xeac7;\nfunction isReactElement(value) {\n    return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function(element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepmerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === \"function\" ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n        return Object.propertyIsEnumerable.call(target, symbol);\n    }) : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.\n    );\n}\nfunction mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction deepmerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\ndeepmerge.all = function deepmergeAll(array, options) {\n    if (!Array.isArray(array)) {\n        throw new Error(\"first argument should be an array\");\n    }\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, options);\n    }, {});\n};\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/deepmerge/dist/cjs.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/load-script/index.js":
/*!*******************************************!*\
  !*** ./node_modules/load-script/index.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = function load(src, opts, cb) {\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    var script = document.createElement(\"script\");\n    if (typeof opts === \"function\") {\n        cb = opts;\n        opts = {};\n    }\n    opts = opts || {};\n    cb = cb || function() {};\n    script.type = opts.type || \"text/javascript\";\n    script.charset = opts.charset || \"utf8\";\n    script.async = \"async\" in opts ? !!opts.async : true;\n    script.src = src;\n    if (opts.attrs) {\n        setAttributes(script, opts.attrs);\n    }\n    if (opts.text) {\n        script.text = \"\" + opts.text;\n    }\n    var onend = \"onload\" in script ? stdOnEnd : ieOnEnd;\n    onend(script, cb);\n    // some good legacy browsers (firefox) fail the 'in' detection above\n    // so as a fallback we always set onload\n    // old IE will ignore this and new IE will set onload\n    if (!script.onload) {\n        stdOnEnd(script, cb);\n    }\n    head.appendChild(script);\n};\nfunction setAttributes(script, attrs) {\n    for(var attr in attrs){\n        script.setAttribute(attr, attrs[attr]);\n    }\n}\nfunction stdOnEnd(script, cb) {\n    script.onload = function() {\n        this.onerror = this.onload = null;\n        cb(null, script);\n    };\n    script.onerror = function() {\n        // this.onload = null here is necessary\n        // because even IE9 works not like others\n        this.onerror = this.onload = null;\n        cb(new Error(\"Failed to load \" + this.src), script);\n    };\n}\nfunction ieOnEnd(script, cb) {\n    script.onreadystatechange = function() {\n        if (this.readyState != \"complete\" && this.readyState != \"loaded\") return;\n        this.onreadystatechange = null;\n        cb(null, script) // there is no way to catch loading errors in IE8\n        ;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sb2FkLXNjcmlwdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQ0FBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxLQUFNQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsRUFBRTtJQUMzQyxJQUFJQyxPQUFPQyxTQUFTRCxJQUFJLElBQUlDLFNBQVNDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQ3BFLElBQUlDLFNBQVNGLFNBQVNHLGFBQWEsQ0FBQztJQUVwQyxJQUFJLE9BQU9OLFNBQVMsWUFBWTtRQUM5QkMsS0FBS0Q7UUFDTEEsT0FBTyxDQUFDO0lBQ1Y7SUFFQUEsT0FBT0EsUUFBUSxDQUFDO0lBQ2hCQyxLQUFLQSxNQUFNLFlBQVk7SUFFdkJJLE9BQU9FLElBQUksR0FBR1AsS0FBS08sSUFBSSxJQUFJO0lBQzNCRixPQUFPRyxPQUFPLEdBQUdSLEtBQUtRLE9BQU8sSUFBSTtJQUNqQ0gsT0FBT0ksS0FBSyxHQUFHLFdBQVdULE9BQU8sQ0FBQyxDQUFDQSxLQUFLUyxLQUFLLEdBQUc7SUFDaERKLE9BQU9OLEdBQUcsR0FBR0E7SUFFYixJQUFJQyxLQUFLVSxLQUFLLEVBQUU7UUFDZEMsY0FBY04sUUFBUUwsS0FBS1UsS0FBSztJQUNsQztJQUVBLElBQUlWLEtBQUtZLElBQUksRUFBRTtRQUNiUCxPQUFPTyxJQUFJLEdBQUcsS0FBS1osS0FBS1ksSUFBSTtJQUM5QjtJQUVBLElBQUlDLFFBQVEsWUFBWVIsU0FBU1MsV0FBV0M7SUFDNUNGLE1BQU1SLFFBQVFKO0lBRWQsb0VBQW9FO0lBQ3BFLHdDQUF3QztJQUN4QyxxREFBcUQ7SUFDckQsSUFBSSxDQUFDSSxPQUFPVyxNQUFNLEVBQUU7UUFDbEJGLFNBQVNULFFBQVFKO0lBQ25CO0lBRUFDLEtBQUtlLFdBQVcsQ0FBQ1o7QUFDbkI7QUFFQSxTQUFTTSxjQUFjTixNQUFNLEVBQUVLLEtBQUs7SUFDbEMsSUFBSyxJQUFJUSxRQUFRUixNQUFPO1FBQ3RCTCxPQUFPYyxZQUFZLENBQUNELE1BQU1SLEtBQUssQ0FBQ1EsS0FBSztJQUN2QztBQUNGO0FBRUEsU0FBU0osU0FBVVQsTUFBTSxFQUFFSixFQUFFO0lBQzNCSSxPQUFPVyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNJLE9BQU8sR0FBRyxJQUFJLENBQUNKLE1BQU0sR0FBRztRQUM3QmYsR0FBRyxNQUFNSTtJQUNYO0lBQ0FBLE9BQU9lLE9BQU8sR0FBRztRQUNmLHVDQUF1QztRQUN2Qyx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSSxDQUFDSixNQUFNLEdBQUc7UUFDN0JmLEdBQUcsSUFBSW9CLE1BQU0sb0JBQW9CLElBQUksQ0FBQ3RCLEdBQUcsR0FBR007SUFDOUM7QUFDRjtBQUVBLFNBQVNVLFFBQVNWLE1BQU0sRUFBRUosRUFBRTtJQUMxQkksT0FBT2lCLGtCQUFrQixHQUFHO1FBQzFCLElBQUksSUFBSSxDQUFDQyxVQUFVLElBQUksY0FBYyxJQUFJLENBQUNBLFVBQVUsSUFBSSxVQUFVO1FBQ2xFLElBQUksQ0FBQ0Qsa0JBQWtCLEdBQUc7UUFDMUJyQixHQUFHLE1BQU1JLFFBQVEsaURBQWlEOztJQUNwRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sb2FkLXNjcmlwdC9pbmRleC5qcz8zOGU1Il0sInNvdXJjZXNDb250ZW50IjpbIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2FkIChzcmMsIG9wdHMsIGNiKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdXG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0c1xuICAgIG9wdHMgPSB7fVxuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge31cbiAgY2IgPSBjYiB8fCBmdW5jdGlvbigpIHt9XG5cbiAgc2NyaXB0LnR5cGUgPSBvcHRzLnR5cGUgfHwgJ3RleHQvamF2YXNjcmlwdCdcbiAgc2NyaXB0LmNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgJ3V0ZjgnO1xuICBzY3JpcHQuYXN5bmMgPSAnYXN5bmMnIGluIG9wdHMgPyAhIW9wdHMuYXN5bmMgOiB0cnVlXG4gIHNjcmlwdC5zcmMgPSBzcmNcblxuICBpZiAob3B0cy5hdHRycykge1xuICAgIHNldEF0dHJpYnV0ZXMoc2NyaXB0LCBvcHRzLmF0dHJzKVxuICB9XG5cbiAgaWYgKG9wdHMudGV4dCkge1xuICAgIHNjcmlwdC50ZXh0ID0gJycgKyBvcHRzLnRleHRcbiAgfVxuXG4gIHZhciBvbmVuZCA9ICdvbmxvYWQnIGluIHNjcmlwdCA/IHN0ZE9uRW5kIDogaWVPbkVuZFxuICBvbmVuZChzY3JpcHQsIGNiKVxuXG4gIC8vIHNvbWUgZ29vZCBsZWdhY3kgYnJvd3NlcnMgKGZpcmVmb3gpIGZhaWwgdGhlICdpbicgZGV0ZWN0aW9uIGFib3ZlXG4gIC8vIHNvIGFzIGEgZmFsbGJhY2sgd2UgYWx3YXlzIHNldCBvbmxvYWRcbiAgLy8gb2xkIElFIHdpbGwgaWdub3JlIHRoaXMgYW5kIG5ldyBJRSB3aWxsIHNldCBvbmxvYWRcbiAgaWYgKCFzY3JpcHQub25sb2FkKSB7XG4gICAgc3RkT25FbmQoc2NyaXB0LCBjYik7XG4gIH1cblxuICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhzY3JpcHQsIGF0dHJzKSB7XG4gIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGRPbkVuZCAoc2NyaXB0LCBjYikge1xuICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG51bGwsIHNjcmlwdClcbiAgfVxuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyB0aGlzLm9ubG9hZCA9IG51bGwgaGVyZSBpcyBuZWNlc3NhcnlcbiAgICAvLyBiZWNhdXNlIGV2ZW4gSUU5IHdvcmtzIG5vdCBsaWtlIG90aGVyc1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgJyArIHRoaXMuc3JjKSwgc2NyaXB0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGllT25FbmQgKHNjcmlwdCwgY2IpIHtcbiAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9ICdjb21wbGV0ZScgJiYgdGhpcy5yZWFkeVN0YXRlICE9ICdsb2FkZWQnKSByZXR1cm5cbiAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcbiAgICBjYihudWxsLCBzY3JpcHQpIC8vIHRoZXJlIGlzIG5vIHdheSB0byBjYXRjaCBsb2FkaW5nIGVycm9ycyBpbiBJRThcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJsb2FkIiwic3JjIiwib3B0cyIsImNiIiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImNoYXJzZXQiLCJhc3luYyIsImF0dHJzIiwic2V0QXR0cmlidXRlcyIsInRleHQiLCJvbmVuZCIsInN0ZE9uRW5kIiwiaWVPbkVuZCIsIm9ubG9hZCIsImFwcGVuZENoaWxkIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsIm9uZXJyb3IiLCJFcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/load-script/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/memoize-one/dist/memoize-one.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/memoize-one/dist/memoize-one.esm.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nvar safeIsNaN = Number.isNaN || function ponyfill(value) {\n    return typeof value === \"number\" && value !== value;\n};\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for(var i = 0; i < newInputs.length; i++){\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) {\n        isEqual = areInputsEqual;\n    }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (memoizeOne);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9tZW1vaXplLW9uZS9kaXN0L21lbW9pemUtb25lLmVzbS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsS0FBSyxJQUN4QixTQUFTQyxTQUFTQyxLQUFLO0lBQ25CLE9BQU8sT0FBT0EsVUFBVSxZQUFZQSxVQUFVQTtBQUNsRDtBQUNKLFNBQVNDLFFBQVFDLEtBQUssRUFBRUMsTUFBTTtJQUMxQixJQUFJRCxVQUFVQyxRQUFRO1FBQ2xCLE9BQU87SUFDWDtJQUNBLElBQUlQLFVBQVVNLFVBQVVOLFVBQVVPLFNBQVM7UUFDdkMsT0FBTztJQUNYO0lBQ0EsT0FBTztBQUNYO0FBQ0EsU0FBU0MsZUFBZUMsU0FBUyxFQUFFQyxVQUFVO0lBQ3pDLElBQUlELFVBQVVFLE1BQU0sS0FBS0QsV0FBV0MsTUFBTSxFQUFFO1FBQ3hDLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxVQUFVRSxNQUFNLEVBQUVDLElBQUs7UUFDdkMsSUFBSSxDQUFDUCxRQUFRSSxTQUFTLENBQUNHLEVBQUUsRUFBRUYsVUFBVSxDQUFDRSxFQUFFLEdBQUc7WUFDdkMsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFFQSxTQUFTQyxXQUFXQyxRQUFRLEVBQUVULE9BQU87SUFDakMsSUFBSUEsWUFBWSxLQUFLLEdBQUc7UUFBRUEsVUFBVUc7SUFBZ0I7SUFDcEQsSUFBSU87SUFDSixJQUFJQyxXQUFXLEVBQUU7SUFDakIsSUFBSUM7SUFDSixJQUFJQyxhQUFhO0lBQ2pCLFNBQVNDO1FBQ0wsSUFBSUMsVUFBVSxFQUFFO1FBQ2hCLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVWCxNQUFNLEVBQUVVLEtBQU07WUFDMUNELE9BQU8sQ0FBQ0MsR0FBRyxHQUFHQyxTQUFTLENBQUNELEdBQUc7UUFDL0I7UUFDQSxJQUFJSCxjQUFjSCxhQUFhLElBQUksSUFBSVYsUUFBUWUsU0FBU0osV0FBVztZQUMvRCxPQUFPQztRQUNYO1FBQ0FBLGFBQWFILFNBQVNTLEtBQUssQ0FBQyxJQUFJLEVBQUVIO1FBQ2xDRixhQUFhO1FBQ2JILFdBQVcsSUFBSTtRQUNmQyxXQUFXSTtRQUNYLE9BQU9IO0lBQ1g7SUFDQSxPQUFPRTtBQUNYO0FBRUEsK0RBQWVOLFVBQVVBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL21lbW9pemUtb25lL2Rpc3QvbWVtb2l6ZS1vbmUuZXNtLmpzPzFmMjEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNhZmVJc05hTiA9IE51bWJlci5pc05hTiB8fFxuICAgIGZ1bmN0aW9uIHBvbnlmaWxsKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSB2YWx1ZTtcbiAgICB9O1xuZnVuY3Rpb24gaXNFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gICAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzYWZlSXNOYU4oZmlyc3QpICYmIHNhZmVJc05hTihzZWNvbmQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBhcmVJbnB1dHNFcXVhbChuZXdJbnB1dHMsIGxhc3RJbnB1dHMpIHtcbiAgICBpZiAobmV3SW5wdXRzLmxlbmd0aCAhPT0gbGFzdElucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0lucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWlzRXF1YWwobmV3SW5wdXRzW2ldLCBsYXN0SW5wdXRzW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBtZW1vaXplT25lKHJlc3VsdEZuLCBpc0VxdWFsKSB7XG4gICAgaWYgKGlzRXF1YWwgPT09IHZvaWQgMCkgeyBpc0VxdWFsID0gYXJlSW5wdXRzRXF1YWw7IH1cbiAgICB2YXIgbGFzdFRoaXM7XG4gICAgdmFyIGxhc3RBcmdzID0gW107XG4gICAgdmFyIGxhc3RSZXN1bHQ7XG4gICAgdmFyIGNhbGxlZE9uY2UgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICAgICAgdmFyIG5ld0FyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG5ld0FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGVkT25jZSAmJiBsYXN0VGhpcyA9PT0gdGhpcyAmJiBpc0VxdWFsKG5ld0FyZ3MsIGxhc3RBcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdEZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICAgICAgICBjYWxsZWRPbmNlID0gdHJ1ZTtcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0QXJncyA9IG5ld0FyZ3M7XG4gICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVPbmU7XG4iXSwibmFtZXMiOlsic2FmZUlzTmFOIiwiTnVtYmVyIiwiaXNOYU4iLCJwb255ZmlsbCIsInZhbHVlIiwiaXNFcXVhbCIsImZpcnN0Iiwic2Vjb25kIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwibGVuZ3RoIiwiaSIsIm1lbW9pemVPbmUiLCJyZXN1bHRGbiIsImxhc3RUaGlzIiwibGFzdEFyZ3MiLCJsYXN0UmVzdWx0IiwiY2FsbGVkT25jZSIsIm1lbW9pemVkIiwibmV3QXJncyIsIl9pIiwiYXJndW1lbnRzIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/memoize-one/dist/memoize-one.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar assign = Object.assign.bind(Object);\nmodule.exports = assign;\nmodule.exports[\"default\"] = module.exports; //# sourceMappingURL=object-assign.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL29iamVjdC1hc3NpZ24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxTQUFTQyxPQUFPRCxNQUFNLENBQUNFLElBQUksQ0FBQ0Q7QUFDaENFLE9BQU9DLE9BQU8sR0FBR0o7QUFDakJHLHlCQUFzQixHQUFHQSxPQUFPQyxPQUFPLEVBRXZDLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9vYmplY3QtYXNzaWduLmpzP2U3ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbi5iaW5kKE9iamVjdCk7XG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0cztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0LWFzc2lnbi5qcy5tYXAiXSwibmFtZXMiOlsiYXNzaWduIiwiT2JqZWN0IiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/object-assign.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nvar printWarning = function() {};\nif (true) {\n    var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"(app-pages-browser)/./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n    var loggedTypeFailures = {};\n    var has = __webpack_require__(/*! ./lib/has */ \"(app-pages-browser)/./node_modules/prop-types/lib/has.js\");\n    printWarning = function(text) {\n        var message = \"Warning: \" + text;\n        if (typeof console !== \"undefined\") {\n            console.error(message);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n        } catch (x) {}\n    };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n    if (true) {\n        for(var typeSpecName in typeSpecs){\n            if (has(typeSpecs, typeSpecName)) {\n                var error;\n                // Prop type validation may throw. In case they do, we don't want to\n                // fail the render phase where it didn't fail before. So we log it.\n                // After these have been cleaned up, we'll let them throw.\n                try {\n                    // This is intentionally an invariant that gets caught. It's the same\n                    // behavior as without this statement except with a better message.\n                    if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                        var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                        err.name = \"Invariant Violation\";\n                        throw err;\n                    }\n                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n                } catch (ex) {\n                    error = ex;\n                }\n                if (error && !(error instanceof Error)) {\n                    printWarning((componentName || \"React class\") + \": type specification of \" + location + \" `\" + typeSpecName + \"` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a \" + typeof error + \". \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\");\n                }\n                if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n                    // Only monitor this failure once because there tends to be a lot of the\n                    // same error.\n                    loggedTypeFailures[error.message] = true;\n                    var stack = getStack ? getStack() : \"\";\n                    printWarning(\"Failed \" + location + \" type: \" + error.message + (stack != null ? stack : \"\"));\n                }\n            }\n        }\n    }\n}\n/**\n * Resets warning cache when testing.\n *\n * @private\n */ checkPropTypes.resetWarningCache = function() {\n    if (true) {\n        loggedTypeFailures = {};\n    }\n};\nmodule.exports = checkPropTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBRUQ7QUFFQSxJQUFJQSxlQUFlLFlBQVk7QUFFL0IsSUFBSUMsSUFBeUIsRUFBYztJQUN6QyxJQUFJQyx1QkFBdUJDLG1CQUFPQSxDQUFDO0lBQ25DLElBQUlDLHFCQUFxQixDQUFDO0lBQzFCLElBQUlDLE1BQU1GLG1CQUFPQSxDQUFDO0lBRWxCSCxlQUFlLFNBQVNNLElBQUk7UUFDMUIsSUFBSUMsVUFBVSxjQUFjRDtRQUM1QixJQUFJLE9BQU9FLFlBQVksYUFBYTtZQUNsQ0EsUUFBUUMsS0FBSyxDQUFDRjtRQUNoQjtRQUNBLElBQUk7WUFDRixxQ0FBcUM7WUFDckMsd0VBQXdFO1lBQ3hFLHlEQUF5RDtZQUN6RCxNQUFNLElBQUlHLE1BQU1IO1FBQ2xCLEVBQUUsT0FBT0ksR0FBRyxDQUFPO0lBQ3JCO0FBQ0Y7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsU0FBU0MsZUFBZUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsYUFBYSxFQUFFQyxRQUFRO0lBQzFFLElBQUloQixJQUF5QixFQUFjO1FBQ3pDLElBQUssSUFBSWlCLGdCQUFnQkwsVUFBVztZQUNsQyxJQUFJUixJQUFJUSxXQUFXSyxlQUFlO2dCQUNoQyxJQUFJVDtnQkFDSixvRUFBb0U7Z0JBQ3BFLG1FQUFtRTtnQkFDbkUsMERBQTBEO2dCQUMxRCxJQUFJO29CQUNGLHFFQUFxRTtvQkFDckUsbUVBQW1FO29CQUNuRSxJQUFJLE9BQU9JLFNBQVMsQ0FBQ0ssYUFBYSxLQUFLLFlBQVk7d0JBQ2pELElBQUlDLE1BQU1ULE1BQ1IsQ0FBQ00saUJBQWlCLGFBQVksSUFBSyxPQUFPRCxXQUFXLFlBQVlHLGVBQWUsbUJBQ2hGLGlGQUFpRixPQUFPTCxTQUFTLENBQUNLLGFBQWEsR0FBRyxPQUNsSDt3QkFFRkMsSUFBSUMsSUFBSSxHQUFHO3dCQUNYLE1BQU1EO29CQUNSO29CQUNBVixRQUFRSSxTQUFTLENBQUNLLGFBQWEsQ0FBQ0osUUFBUUksY0FBY0YsZUFBZUQsVUFBVSxNQUFNYjtnQkFDdkYsRUFBRSxPQUFPbUIsSUFBSTtvQkFDWFosUUFBUVk7Z0JBQ1Y7Z0JBQ0EsSUFBSVosU0FBUyxDQUFFQSxDQUFBQSxpQkFBaUJDLEtBQUksR0FBSTtvQkFDdENWLGFBQ0UsQ0FBQ2dCLGlCQUFpQixhQUFZLElBQUssNkJBQ25DRCxXQUFXLE9BQU9HLGVBQWUsb0NBQ2pDLDhEQUE4RCxPQUFPVCxRQUFRLE9BQzdFLG9FQUNBLG1FQUNBO2dCQUVKO2dCQUNBLElBQUlBLGlCQUFpQkMsU0FBUyxDQUFFRCxDQUFBQSxNQUFNRixPQUFPLElBQUlILGtCQUFpQixHQUFJO29CQUNwRSx3RUFBd0U7b0JBQ3hFLGNBQWM7b0JBQ2RBLGtCQUFrQixDQUFDSyxNQUFNRixPQUFPLENBQUMsR0FBRztvQkFFcEMsSUFBSWUsUUFBUUwsV0FBV0EsYUFBYTtvQkFFcENqQixhQUNFLFlBQVllLFdBQVcsWUFBWU4sTUFBTUYsT0FBTyxHQUFJZSxDQUFBQSxTQUFTLE9BQU9BLFFBQVEsRUFBQztnQkFFakY7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRFYsZUFBZVcsaUJBQWlCLEdBQUc7SUFDakMsSUFBSXRCLElBQXlCLEVBQWM7UUFDekNHLHFCQUFxQixDQUFDO0lBQ3hCO0FBQ0Y7QUFFQW9CLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanM/MjYyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vbGliL2hhcycpO1xuXG4gIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgdGV4dDtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7IC8qKi8gfVxuICB9O1xufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy5cbiAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gez9GdW5jdGlvbn0gZ2V0U3RhY2sgUmV0dXJucyB0aGUgY29tcG9uZW50IHN0YWNrLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBnZXRTdGFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgIGlmICh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcihcbiAgICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICtcbiAgICAgICAgICAgICAgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArXG4gICAgICAgICAgICAgICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICcgK1xuICAgICAgICAgICAgbG9jYXRpb24gKyAnIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAnICsgdHlwZW9mIGVycm9yICsgJy4gJyArXG4gICAgICAgICAgICAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArXG4gICAgICAgICAgICAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICtcbiAgICAgICAgICAgICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdGYWlsZWQgJyArIGxvY2F0aW9uICsgJyB0eXBlOiAnICsgZXJyb3IubWVzc2FnZSArIChzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVzZXRzIHdhcm5pbmcgY2FjaGUgd2hlbiB0ZXN0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcbiJdLCJuYW1lcyI6WyJwcmludFdhcm5pbmciLCJwcm9jZXNzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJyZXF1aXJlIiwibG9nZ2VkVHlwZUZhaWx1cmVzIiwiaGFzIiwidGV4dCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciIsIngiLCJjaGVja1Byb3BUeXBlcyIsInR5cGVTcGVjcyIsInZhbHVlcyIsImxvY2F0aW9uIiwiY29tcG9uZW50TmFtZSIsImdldFN0YWNrIiwidHlwZVNwZWNOYW1lIiwiZXJyIiwibmFtZSIsImV4Iiwic3RhY2siLCJyZXNldFdhcm5pbmdDYWNoZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/checkPropTypes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nvar ReactIs = __webpack_require__(/*! react-is */ \"(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/index.js\");\nvar assign = __webpack_require__(/*! object-assign */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/object-assign.js\");\nvar ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"(app-pages-browser)/./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\nvar has = __webpack_require__(/*! ./lib/has */ \"(app-pages-browser)/./node_modules/prop-types/lib/has.js\");\nvar checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ \"(app-pages-browser)/./node_modules/prop-types/checkPropTypes.js\");\nvar printWarning = function() {};\nif (true) {\n    printWarning = function(text) {\n        var message = \"Warning: \" + text;\n        if (typeof console !== \"undefined\") {\n            console.error(message);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n        } catch (x) {}\n    };\n}\nfunction emptyFunctionThatReturnsNull() {\n    return null;\n}\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\"; // Before Symbol spec.\n    /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */ function getIteratorFn(maybeIterable) {\n        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n        if (typeof iteratorFn === \"function\") {\n            return iteratorFn;\n        }\n    }\n    /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */ var ANONYMOUS = \"<<anonymous>>\";\n    // Important!\n    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n    var ReactPropTypes = {\n        array: createPrimitiveTypeChecker(\"array\"),\n        bigint: createPrimitiveTypeChecker(\"bigint\"),\n        bool: createPrimitiveTypeChecker(\"boolean\"),\n        func: createPrimitiveTypeChecker(\"function\"),\n        number: createPrimitiveTypeChecker(\"number\"),\n        object: createPrimitiveTypeChecker(\"object\"),\n        string: createPrimitiveTypeChecker(\"string\"),\n        symbol: createPrimitiveTypeChecker(\"symbol\"),\n        any: createAnyTypeChecker(),\n        arrayOf: createArrayOfTypeChecker,\n        element: createElementTypeChecker(),\n        elementType: createElementTypeTypeChecker(),\n        instanceOf: createInstanceTypeChecker,\n        node: createNodeChecker(),\n        objectOf: createObjectOfTypeChecker,\n        oneOf: createEnumTypeChecker,\n        oneOfType: createUnionTypeChecker,\n        shape: createShapeTypeChecker,\n        exact: createStrictShapeTypeChecker\n    };\n    /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */ /*eslint-disable no-self-compare*/ function is(x, y) {\n        // SameValue algorithm\n        if (x === y) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return x !== 0 || 1 / x === 1 / y;\n        } else {\n            // Step 6.a: NaN == NaN\n            return x !== x && y !== y;\n        }\n    }\n    /*eslint-enable no-self-compare*/ /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */ function PropTypeError(message, data) {\n        this.message = message;\n        this.data = data && typeof data === \"object\" ? data : {};\n        this.stack = \"\";\n    }\n    // Make `instanceof Error` still work for returned errors.\n    PropTypeError.prototype = Error.prototype;\n    function createChainableTypeChecker(validate) {\n        if (true) {\n            var manualPropTypeCallCache = {};\n            var manualPropTypeWarningCount = 0;\n        }\n        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n            componentName = componentName || ANONYMOUS;\n            propFullName = propFullName || propName;\n            if (secret !== ReactPropTypesSecret) {\n                if (throwOnDirectAccess) {\n                    // New behavior only for users of `prop-types` package\n                    var err = new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. \" + \"Use `PropTypes.checkPropTypes()` to call them. \" + \"Read more at http://fb.me/use-check-prop-types\");\n                    err.name = \"Invariant Violation\";\n                    throw err;\n                } else if ( true && typeof console !== \"undefined\") {\n                    // Old behavior for people using React.PropTypes\n                    var cacheKey = componentName + \":\" + propName;\n                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n                    manualPropTypeWarningCount < 3) {\n                        printWarning(\"You are manually calling a React.PropTypes validation \" + \"function for the `\" + propFullName + \"` prop on `\" + componentName + \"`. This is deprecated \" + \"and will throw in the standalone `prop-types` package. \" + \"You may be seeing this warning due to a third-party PropTypes \" + \"library. See https://fb.me/react-warning-dont-call-proptypes \" + \"for details.\");\n                        manualPropTypeCallCache[cacheKey] = true;\n                        manualPropTypeWarningCount++;\n                    }\n                }\n            }\n            if (props[propName] == null) {\n                if (isRequired) {\n                    if (props[propName] === null) {\n                        return new PropTypeError(\"The \" + location + \" `\" + propFullName + \"` is marked as required \" + (\"in `\" + componentName + \"`, but its value is `null`.\"));\n                    }\n                    return new PropTypeError(\"The \" + location + \" `\" + propFullName + \"` is marked as required in \" + (\"`\" + componentName + \"`, but its value is `undefined`.\"));\n                }\n                return null;\n            } else {\n                return validate(props, propName, componentName, location, propFullName);\n            }\n        }\n        var chainedCheckType = checkType.bind(null, false);\n        chainedCheckType.isRequired = checkType.bind(null, true);\n        return chainedCheckType;\n    }\n    function createPrimitiveTypeChecker(expectedType) {\n        function validate(props, propName, componentName, location, propFullName, secret) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== expectedType) {\n                // `propValue` being instance of, say, date/regexp, pass the 'object'\n                // check, but we can offer a more precise error message here rather than\n                // 'of type `object`'.\n                var preciseType = getPreciseType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + preciseType + \"` supplied to `\" + componentName + \"`, expected \") + (\"`\" + expectedType + \"`.\"), {\n                    expectedType: expectedType\n                });\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createAnyTypeChecker() {\n        return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n    }\n    function createArrayOfTypeChecker(typeChecker) {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (typeof typeChecker !== \"function\") {\n                return new PropTypeError(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has invalid PropType notation inside arrayOf.\");\n            }\n            var propValue = props[propName];\n            if (!Array.isArray(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an array.\"));\n            }\n            for(var i = 0; i < propValue.length; i++){\n                var error = typeChecker(propValue, i, componentName, location, propFullName + \"[\" + i + \"]\", ReactPropTypesSecret);\n                if (error instanceof Error) {\n                    return error;\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createElementTypeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            if (!isValidElement(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected a single ReactElement.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createElementTypeTypeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            if (!ReactIs.isValidElementType(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected a single ReactElement type.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createInstanceTypeChecker(expectedClass) {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (!(props[propName] instanceof expectedClass)) {\n                var expectedClassName = expectedClass.name || ANONYMOUS;\n                var actualClassName = getClassName(props[propName]);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + actualClassName + \"` supplied to `\" + componentName + \"`, expected \") + (\"instance of `\" + expectedClassName + \"`.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createEnumTypeChecker(expectedValues) {\n        if (!Array.isArray(expectedValues)) {\n            if (true) {\n                if (arguments.length > 1) {\n                    printWarning(\"Invalid arguments supplied to oneOf, expected an array, got \" + arguments.length + \" arguments. \" + \"A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).\");\n                } else {\n                    printWarning(\"Invalid argument supplied to oneOf, expected an array.\");\n                }\n            }\n            return emptyFunctionThatReturnsNull;\n        }\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            for(var i = 0; i < expectedValues.length; i++){\n                if (is(propValue, expectedValues[i])) {\n                    return null;\n                }\n            }\n            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n                var type = getPreciseType(value);\n                if (type === \"symbol\") {\n                    return String(value);\n                }\n                return value;\n            });\n            return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of value `\" + String(propValue) + \"` \" + (\"supplied to `\" + componentName + \"`, expected one of \" + valuesString + \".\"));\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createObjectOfTypeChecker(typeChecker) {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (typeof typeChecker !== \"function\") {\n                return new PropTypeError(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has invalid PropType notation inside objectOf.\");\n            }\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== \"object\") {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an object.\"));\n            }\n            for(var key in propValue){\n                if (has(propValue, key)) {\n                    var error = typeChecker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret);\n                    if (error instanceof Error) {\n                        return error;\n                    }\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createUnionTypeChecker(arrayOfTypeCheckers) {\n        if (!Array.isArray(arrayOfTypeCheckers)) {\n             true ? printWarning(\"Invalid argument supplied to oneOfType, expected an instance of array.\") : 0;\n            return emptyFunctionThatReturnsNull;\n        }\n        for(var i = 0; i < arrayOfTypeCheckers.length; i++){\n            var checker = arrayOfTypeCheckers[i];\n            if (typeof checker !== \"function\") {\n                printWarning(\"Invalid argument supplied to oneOfType. Expected an array of check functions, but \" + \"received \" + getPostfixForTypeWarning(checker) + \" at index \" + i + \".\");\n                return emptyFunctionThatReturnsNull;\n            }\n        }\n        function validate(props, propName, componentName, location, propFullName) {\n            var expectedTypes = [];\n            for(var i = 0; i < arrayOfTypeCheckers.length; i++){\n                var checker = arrayOfTypeCheckers[i];\n                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);\n                if (checkerResult == null) {\n                    return null;\n                }\n                if (checkerResult.data && has(checkerResult.data, \"expectedType\")) {\n                    expectedTypes.push(checkerResult.data.expectedType);\n                }\n            }\n            var expectedTypesMessage = expectedTypes.length > 0 ? \", expected one of type [\" + expectedTypes.join(\", \") + \"]\" : \"\";\n            return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to \" + (\"`\" + componentName + \"`\" + expectedTypesMessage + \".\"));\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createNodeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (!isNode(props[propName])) {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to \" + (\"`\" + componentName + \"`, expected a ReactNode.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function invalidValidatorError(componentName, location, propFullName, key, type) {\n        return new PropTypeError((componentName || \"React class\") + \": \" + location + \" type `\" + propFullName + \".\" + key + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + type + \"`.\");\n    }\n    function createShapeTypeChecker(shapeTypes) {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== \"object\") {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n            }\n            for(var key in shapeTypes){\n                var checker = shapeTypes[key];\n                if (typeof checker !== \"function\") {\n                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n                }\n                var error = checker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret);\n                if (error) {\n                    return error;\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createStrictShapeTypeChecker(shapeTypes) {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== \"object\") {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n            }\n            // We need to check all keys in case some are required but missing from props.\n            var allKeys = assign({}, props[propName], shapeTypes);\n            for(var key in allKeys){\n                var checker = shapeTypes[key];\n                if (has(shapeTypes, key) && typeof checker !== \"function\") {\n                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n                }\n                if (!checker) {\n                    return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` key `\" + key + \"` supplied to `\" + componentName + \"`.\" + \"\\nBad object: \" + JSON.stringify(props[propName], null, \"  \") + \"\\nValid keys: \" + JSON.stringify(Object.keys(shapeTypes), null, \"  \"));\n                }\n                var error = checker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret);\n                if (error) {\n                    return error;\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function isNode(propValue) {\n        switch(typeof propValue){\n            case \"number\":\n            case \"string\":\n            case \"undefined\":\n                return true;\n            case \"boolean\":\n                return !propValue;\n            case \"object\":\n                if (Array.isArray(propValue)) {\n                    return propValue.every(isNode);\n                }\n                if (propValue === null || isValidElement(propValue)) {\n                    return true;\n                }\n                var iteratorFn = getIteratorFn(propValue);\n                if (iteratorFn) {\n                    var iterator = iteratorFn.call(propValue);\n                    var step;\n                    if (iteratorFn !== propValue.entries) {\n                        while(!(step = iterator.next()).done){\n                            if (!isNode(step.value)) {\n                                return false;\n                            }\n                        }\n                    } else {\n                        // Iterator will provide entry [k,v] tuples rather than values.\n                        while(!(step = iterator.next()).done){\n                            var entry = step.value;\n                            if (entry) {\n                                if (!isNode(entry[1])) {\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    return false;\n                }\n                return true;\n            default:\n                return false;\n        }\n    }\n    function isSymbol(propType, propValue) {\n        // Native Symbol.\n        if (propType === \"symbol\") {\n            return true;\n        }\n        // falsy value can't be a Symbol\n        if (!propValue) {\n            return false;\n        }\n        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n        if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n            return true;\n        }\n        // Fallback for non-spec compliant Symbols which are polyfilled.\n        if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n            return true;\n        }\n        return false;\n    }\n    // Equivalent of `typeof` but with special handling for array and regexp.\n    function getPropType(propValue) {\n        var propType = typeof propValue;\n        if (Array.isArray(propValue)) {\n            return \"array\";\n        }\n        if (propValue instanceof RegExp) {\n            // Old webkits (at least until Android 4.0) return 'function' rather than\n            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n            // passes PropTypes.object.\n            return \"object\";\n        }\n        if (isSymbol(propType, propValue)) {\n            return \"symbol\";\n        }\n        return propType;\n    }\n    // This handles more types than `getPropType`. Only used for error messages.\n    // See `createPrimitiveTypeChecker`.\n    function getPreciseType(propValue) {\n        if (typeof propValue === \"undefined\" || propValue === null) {\n            return \"\" + propValue;\n        }\n        var propType = getPropType(propValue);\n        if (propType === \"object\") {\n            if (propValue instanceof Date) {\n                return \"date\";\n            } else if (propValue instanceof RegExp) {\n                return \"regexp\";\n            }\n        }\n        return propType;\n    }\n    // Returns a string that is postfixed to a warning about an invalid type.\n    // For example, \"undefined\" or \"of type array\"\n    function getPostfixForTypeWarning(value) {\n        var type = getPreciseType(value);\n        switch(type){\n            case \"array\":\n            case \"object\":\n                return \"an \" + type;\n            case \"boolean\":\n            case \"date\":\n            case \"regexp\":\n                return \"a \" + type;\n            default:\n                return type;\n        }\n    }\n    // Returns class name of the object, if any.\n    function getClassName(propValue) {\n        if (!propValue.constructor || !propValue.constructor.name) {\n            return ANONYMOUS;\n        }\n        return propValue.constructor.name;\n    }\n    ReactPropTypes.checkPropTypes = checkPropTypes;\n    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n    return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/factoryWithTypeCheckers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    var ReactIs = __webpack_require__(/*! react-is */ \"(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/index.js\");\n    // By explicitly using `prop-types` you are opting into new development behavior.\n    // http://fb.me/prop-types-in-prod\n    var throwOnDirectAccess = true;\n    module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ \"(app-pages-browser)/./node_modules/prop-types/factoryWithTypeCheckers.js\")(ReactIs.isElement, throwOnDirectAccess);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDO0FBRUQsSUFBSUEsSUFBeUIsRUFBYztJQUN6QyxJQUFJQyxVQUFVQyxtQkFBT0EsQ0FBQztJQUV0QixpRkFBaUY7SUFDakYsa0NBQWtDO0lBQ2xDLElBQUlDLHNCQUFzQjtJQUMxQkMsT0FBT0MsT0FBTyxHQUFHSCxtQkFBT0EsQ0FBQyw2R0FBNkJELFFBQVFLLFNBQVMsRUFBRUg7QUFDM0UsT0FBTyxFQUlOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzP2JkZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJSZWFjdElzIiwicmVxdWlyZSIsInRocm93T25EaXJlY3RBY2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNFbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nvar ReactPropTypesSecret = \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\";\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Q0FLQyxHQUVEO0FBRUEsSUFBSUEsdUJBQXVCO0FBRTNCQyxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9lMDk4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/lib/ReactPropTypesSecret.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nmodule.exports = Function.call.bind(Object.prototype.hasOwnProperty);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9oYXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUdDLFNBQVNDLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxPQUFPQyxTQUFTLENBQUNDLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL2hhcy5qcz9lNDcwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJGdW5jdGlvbiIsImNhbGwiLCJiaW5kIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/lib/has.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n        // nor polyfill, then a plain number is used for performance.\n        var hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for(\"react.element\") : 0xeac7;\n        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for(\"react.portal\") : 0xeaca;\n        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for(\"react.fragment\") : 0xeacb;\n        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.strict_mode\") : 0xeacc;\n        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for(\"react.profiler\") : 0xead2;\n        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for(\"react.provider\") : 0xeacd;\n        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for(\"react.context\") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n        // (unstable) APIs that have been removed. Can we remove the symbols?\n        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for(\"react.async_mode\") : 0xeacf;\n        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.concurrent_mode\") : 0xeacf;\n        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for(\"react.forward_ref\") : 0xead0;\n        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for(\"react.suspense\") : 0xead1;\n        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for(\"react.suspense_list\") : 0xead8;\n        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for(\"react.memo\") : 0xead3;\n        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for(\"react.lazy\") : 0xead4;\n        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for(\"react.block\") : 0xead9;\n        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for(\"react.fundamental\") : 0xead5;\n        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for(\"react.responder\") : 0xead6;\n        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for(\"react.scope\") : 0xead7;\n        function isValidElementType(type) {\n            return typeof type === \"string\" || typeof type === \"function\" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n        }\n        function typeOf(object) {\n            if (typeof object === \"object\" && object !== null) {\n                var $$typeof = object.$$typeof;\n                switch($$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        var type = object.type;\n                        switch(type){\n                            case REACT_ASYNC_MODE_TYPE:\n                            case REACT_CONCURRENT_MODE_TYPE:\n                            case REACT_FRAGMENT_TYPE:\n                            case REACT_PROFILER_TYPE:\n                            case REACT_STRICT_MODE_TYPE:\n                            case REACT_SUSPENSE_TYPE:\n                                return type;\n                            default:\n                                var $$typeofType = type && type.$$typeof;\n                                switch($$typeofType){\n                                    case REACT_CONTEXT_TYPE:\n                                    case REACT_FORWARD_REF_TYPE:\n                                    case REACT_LAZY_TYPE:\n                                    case REACT_MEMO_TYPE:\n                                    case REACT_PROVIDER_TYPE:\n                                        return $$typeofType;\n                                    default:\n                                        return $$typeof;\n                                }\n                        }\n                    case REACT_PORTAL_TYPE:\n                        return $$typeof;\n                }\n            }\n            return undefined;\n        } // AsyncMode is deprecated along with isAsyncMode\n        var AsyncMode = REACT_ASYNC_MODE_TYPE;\n        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n        var ContextConsumer = REACT_CONTEXT_TYPE;\n        var ContextProvider = REACT_PROVIDER_TYPE;\n        var Element = REACT_ELEMENT_TYPE;\n        var ForwardRef = REACT_FORWARD_REF_TYPE;\n        var Fragment = REACT_FRAGMENT_TYPE;\n        var Lazy = REACT_LAZY_TYPE;\n        var Memo = REACT_MEMO_TYPE;\n        var Portal = REACT_PORTAL_TYPE;\n        var Profiler = REACT_PROFILER_TYPE;\n        var StrictMode = REACT_STRICT_MODE_TYPE;\n        var Suspense = REACT_SUSPENSE_TYPE;\n        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n        function isAsyncMode(object) {\n            {\n                if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n                    console[\"warn\"](\"The ReactIs.isAsyncMode() alias has been deprecated, \" + \"and will be removed in React 17+. Update your code to use \" + \"ReactIs.isConcurrentMode() instead. It has the exact same API.\");\n                }\n            }\n            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n        }\n        function isConcurrentMode(object) {\n            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n        }\n        function isContextConsumer(object) {\n            return typeOf(object) === REACT_CONTEXT_TYPE;\n        }\n        function isContextProvider(object) {\n            return typeOf(object) === REACT_PROVIDER_TYPE;\n        }\n        function isElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        function isForwardRef(object) {\n            return typeOf(object) === REACT_FORWARD_REF_TYPE;\n        }\n        function isFragment(object) {\n            return typeOf(object) === REACT_FRAGMENT_TYPE;\n        }\n        function isLazy(object) {\n            return typeOf(object) === REACT_LAZY_TYPE;\n        }\n        function isMemo(object) {\n            return typeOf(object) === REACT_MEMO_TYPE;\n        }\n        function isPortal(object) {\n            return typeOf(object) === REACT_PORTAL_TYPE;\n        }\n        function isProfiler(object) {\n            return typeOf(object) === REACT_PROFILER_TYPE;\n        }\n        function isStrictMode(object) {\n            return typeOf(object) === REACT_STRICT_MODE_TYPE;\n        }\n        function isSuspense(object) {\n            return typeOf(object) === REACT_SUSPENSE_TYPE;\n        }\n        exports.AsyncMode = AsyncMode;\n        exports.ConcurrentMode = ConcurrentMode;\n        exports.ContextConsumer = ContextConsumer;\n        exports.ContextProvider = ContextProvider;\n        exports.Element = Element;\n        exports.ForwardRef = ForwardRef;\n        exports.Fragment = Fragment;\n        exports.Lazy = Lazy;\n        exports.Memo = Memo;\n        exports.Portal = Portal;\n        exports.Profiler = Profiler;\n        exports.StrictMode = StrictMode;\n        exports.Suspense = Suspense;\n        exports.isAsyncMode = isAsyncMode;\n        exports.isConcurrentMode = isConcurrentMode;\n        exports.isContextConsumer = isContextConsumer;\n        exports.isContextProvider = isContextProvider;\n        exports.isElement = isElement;\n        exports.isForwardRef = isForwardRef;\n        exports.isFragment = isFragment;\n        exports.isLazy = isLazy;\n        exports.isMemo = isMemo;\n        exports.isPortal = isPortal;\n        exports.isProfiler = isProfiler;\n        exports.isStrictMode = isStrictMode;\n        exports.isSuspense = isSuspense;\n        exports.isValidElementType = isValidElementType;\n        exports.typeOf = typeOf;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/prop-types/node_modules/react-is/index.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEtBQXlCLEVBQWMsRUFFMUMsTUFBTTtJQUNMQyw0S0FBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzPzVkNTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/prop-types/node_modules/react-is/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-fast-compare/index.js":
/*!**************************************************!*\
  !*** ./node_modules/react-fast-compare/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */ \nvar hasElementType = typeof Element !== \"undefined\";\nvar hasMap = typeof Map === \"function\";\nvar hasSet = typeof Set === \"function\";\nvar hasArrayBuffer = typeof ArrayBuffer === \"function\" && !!ArrayBuffer.isView;\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\nfunction equal(a, b) {\n    // START: fast-deep-equal es6/index.js 3.1.3\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;\n            return true;\n        }\n        // START: Modifications:\n        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n        //    to co-exist with es5.\n        // 2. Replace `for of` with es5 compliant iteration using `for`.\n        //    Basically, take:\n        //\n        //    ```js\n        //    for (i of a.entries())\n        //      if (!b.has(i[0])) return false;\n        //    ```\n        //\n        //    ... and convert to:\n        //\n        //    ```js\n        //    it = a.entries();\n        //    while (!(i = it.next()).done)\n        //      if (!b.has(i.value[0])) return false;\n        //    ```\n        //\n        //    **Note**: `i` access switches to `i.value`.\n        var it;\n        if (hasMap && a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size) return false;\n            it = a.entries();\n            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;\n            it = a.entries();\n            while(!(i = it.next()).done)if (!equal(i.value[1], b.get(i.value[0]))) return false;\n            return true;\n        }\n        if (hasSet && a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size) return false;\n            it = a.entries();\n            while(!(i = it.next()).done)if (!b.has(i.value[0])) return false;\n            return true;\n        }\n        // END: Modifications\n        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (a[i] !== b[i]) return false;\n            return true;\n        }\n        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n        // START: Modifications:\n        // Apply guards for `Object.create(null)` handling. See:\n        // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n        // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === \"function\" && typeof b.valueOf === \"function\") return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString && typeof a.toString === \"function\" && typeof b.toString === \"function\") return a.toString() === b.toString();\n        // END: Modifications\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        // END: fast-deep-equal\n        // START: react-fast-compare\n        // custom handling for DOM elements\n        if (hasElementType && a instanceof Element) return false;\n        // custom handling for React/Preact\n        for(i = length; i-- !== 0;){\n            if ((keys[i] === \"_owner\" || keys[i] === \"__v\" || keys[i] === \"__o\") && a.$$typeof) {\n                continue;\n            }\n            // all other properties should be traversed as usual\n            if (!equal(a[keys[i]], b[keys[i]])) return false;\n        }\n        // END: react-fast-compare\n        // START: fast-deep-equal\n        return true;\n    }\n    return a !== a && b !== b;\n}\n// end fast-deep-equal\nmodule.exports = function isEqual(a, b) {\n    try {\n        return equal(a, b);\n    } catch (error) {\n        if ((error.message || \"\").match(/stack|recursion/i)) {\n            // warn on circular references, don't crash\n            // browsers give this different errors name and messages:\n            // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n            // firefox: \"InternalError\", too much recursion\"\n            // edge: \"Error\", \"Out of stack space\"\n            console.warn(\"react-fast-compare cannot handle circular refs\");\n            return false;\n        }\n        // some other error. we should definitely know about these\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-fast-compare/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/Player.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lazy/Player.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Player_exports = {};\n__export(Player_exports, {\n    default: ()=>Player\n});\nmodule.exports = __toCommonJS(Player_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(app-pages-browser)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(app-pages-browser)/./node_modules/react-player/lazy/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nconst SEEK_ON_PLAY_EXPIRY = 5e3;\nclass Player extends import_react.Component {\n    componentDidMount() {\n        this.mounted = true;\n    }\n    componentWillUnmount() {\n        clearTimeout(this.progressTimeout);\n        clearTimeout(this.durationCheckTimeout);\n        if (this.isReady && this.props.stopOnUnmount) {\n            this.player.stop();\n            if (this.player.disablePIP) {\n                this.player.disablePIP();\n            }\n        }\n        this.mounted = false;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.player) {\n            return;\n        }\n        const { url, playing, volume, muted, playbackRate, pip, loop, activePlayer, disableDeferredLoading } = this.props;\n        if (!(0, import_react_fast_compare.default)(prevProps.url, url)) {\n            if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, import_utils.isMediaStream)(url)) {\n                console.warn(\"ReactPlayer: the attempt to load \".concat(url, \" is being deferred until the player has loaded\"));\n                this.loadOnReady = url;\n                return;\n            }\n            this.isLoading = true;\n            this.startOnPlay = true;\n            this.onDurationCalled = false;\n            this.player.load(url, this.isReady);\n        }\n        if (!prevProps.playing && playing && !this.isPlaying) {\n            this.player.play();\n        }\n        if (prevProps.playing && !playing && this.isPlaying) {\n            this.player.pause();\n        }\n        if (!prevProps.pip && pip && this.player.enablePIP) {\n            this.player.enablePIP();\n        }\n        if (prevProps.pip && !pip && this.player.disablePIP) {\n            this.player.disablePIP();\n        }\n        if (prevProps.volume !== volume && volume !== null) {\n            this.player.setVolume(volume);\n        }\n        if (prevProps.muted !== muted) {\n            if (muted) {\n                this.player.mute();\n            } else {\n                this.player.unmute();\n                if (volume !== null) {\n                    setTimeout(()=>this.player.setVolume(volume));\n                }\n            }\n        }\n        if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n            this.player.setPlaybackRate(playbackRate);\n        }\n        if (prevProps.loop !== loop && this.player.setLoop) {\n            this.player.setLoop(loop);\n        }\n    }\n    getDuration() {\n        if (!this.isReady) return null;\n        return this.player.getDuration();\n    }\n    getCurrentTime() {\n        if (!this.isReady) return null;\n        return this.player.getCurrentTime();\n    }\n    getSecondsLoaded() {\n        if (!this.isReady) return null;\n        return this.player.getSecondsLoaded();\n    }\n    seekTo(amount, type, keepPlaying) {\n        if (!this.isReady) {\n            if (amount !== 0) {\n                this.seekOnPlay = amount;\n                setTimeout(()=>{\n                    this.seekOnPlay = null;\n                }, SEEK_ON_PLAY_EXPIRY);\n            }\n            return;\n        }\n        const isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n        if (isFraction) {\n            const duration = this.player.getDuration();\n            if (!duration) {\n                console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                return;\n            }\n            this.player.seekTo(duration * amount, keepPlaying);\n            return;\n        }\n        this.player.seekTo(amount, keepPlaying);\n    }\n    render() {\n        const Player2 = this.props.activePlayer;\n        if (!Player2) {\n            return null;\n        }\n        return /* @__PURE__ */ import_react.default.createElement(Player2, {\n            ...this.props,\n            onMount: this.handlePlayerMount,\n            onReady: this.handleReady,\n            onPlay: this.handlePlay,\n            onPause: this.handlePause,\n            onEnded: this.handleEnded,\n            onLoaded: this.handleLoaded,\n            onError: this.handleError\n        });\n    }\n    constructor(){\n        var _this;\n        super(...arguments), _this = this;\n        __publicField(this, \"mounted\", false);\n        __publicField(this, \"isReady\", false);\n        __publicField(this, \"isPlaying\", false);\n        // Track playing state internally to prevent bugs\n        __publicField(this, \"isLoading\", true);\n        // Use isLoading to prevent onPause when switching URL\n        __publicField(this, \"loadOnReady\", null);\n        __publicField(this, \"startOnPlay\", true);\n        __publicField(this, \"seekOnPlay\", null);\n        __publicField(this, \"onDurationCalled\", false);\n        __publicField(this, \"handlePlayerMount\", (player)=>{\n            if (this.player) {\n                this.progress();\n                return;\n            }\n            this.player = player;\n            this.player.load(this.props.url);\n            this.progress();\n        });\n        __publicField(this, \"getInternalPlayer\", (key)=>{\n            if (!this.player) return null;\n            return this.player[key];\n        });\n        __publicField(this, \"progress\", ()=>{\n            if (this.props.url && this.player && this.isReady) {\n                const playedSeconds = this.getCurrentTime() || 0;\n                const loadedSeconds = this.getSecondsLoaded();\n                const duration = this.getDuration();\n                if (duration) {\n                    const progress = {\n                        playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    }\n                    if (progress.playedSeconds !== this.prevPlayed || progress.loadedSeconds !== this.prevLoaded) {\n                        this.props.onProgress(progress);\n                    }\n                    this.prevPlayed = progress.playedSeconds;\n                    this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            this.progressTimeout = setTimeout(this.progress, this.props.progressFrequency || this.props.progressInterval);\n        });\n        __publicField(this, \"handleReady\", ()=>{\n            if (!this.mounted) return;\n            this.isReady = true;\n            this.isLoading = false;\n            const { onReady, playing, volume, muted } = this.props;\n            onReady();\n            if (!muted && volume !== null) {\n                this.player.setVolume(volume);\n            }\n            if (this.loadOnReady) {\n                this.player.load(this.loadOnReady, true);\n                this.loadOnReady = null;\n            } else if (playing) {\n                this.player.play();\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePlay\", ()=>{\n            this.isPlaying = true;\n            this.isLoading = false;\n            const { onStart, onPlay, playbackRate } = this.props;\n            if (this.startOnPlay) {\n                if (this.player.setPlaybackRate && playbackRate !== 1) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                this.startOnPlay = false;\n            }\n            onPlay();\n            if (this.seekOnPlay) {\n                this.seekTo(this.seekOnPlay);\n                this.seekOnPlay = null;\n            }\n            this.handleDurationCheck();\n        });\n        __publicField(this, \"handlePause\", (e)=>{\n            this.isPlaying = false;\n            if (!this.isLoading) {\n                this.props.onPause(e);\n            }\n        });\n        __publicField(this, \"handleEnded\", ()=>{\n            const { activePlayer, loop, onEnded } = this.props;\n            if (activePlayer.loopOnEnded && loop) {\n                this.seekTo(0);\n            }\n            if (!loop) {\n                this.isPlaying = false;\n                onEnded();\n            }\n        });\n        __publicField(this, \"handleError\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this.isLoading = false;\n            _this.props.onError(...args);\n        });\n        __publicField(this, \"handleDurationCheck\", ()=>{\n            clearTimeout(this.durationCheckTimeout);\n            const duration = this.getDuration();\n            if (duration) {\n                if (!this.onDurationCalled) {\n                    this.props.onDuration(duration);\n                    this.onDurationCalled = true;\n                }\n            } else {\n                this.durationCheckTimeout = setTimeout(this.handleDurationCheck, 100);\n            }\n        });\n        __publicField(this, \"handleLoaded\", ()=>{\n            this.isLoading = false;\n        });\n    }\n}\n__publicField(Player, \"displayName\", \"Player\");\n__publicField(Player, \"propTypes\", import_props.propTypes);\n__publicField(Player, \"defaultProps\", import_props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/Player.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/ReactPlayer.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-player/lazy/ReactPlayer.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar ReactPlayer_exports = {};\n__export(ReactPlayer_exports, {\n    createReactPlayer: ()=>createReactPlayer\n});\nmodule.exports = __toCommonJS(ReactPlayer_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(app-pages-browser)/./node_modules/deepmerge/dist/cjs.js\"));\nvar import_memoize_one = __toESM(__webpack_require__(/*! memoize-one */ \"(app-pages-browser)/./node_modules/memoize-one/dist/memoize-one.esm.js\"));\nvar import_react_fast_compare = __toESM(__webpack_require__(/*! react-fast-compare */ \"(app-pages-browser)/./node_modules/react-fast-compare/index.js\"));\nvar import_props = __webpack_require__(/*! ./props */ \"(app-pages-browser)/./node_modules/react-player/lazy/props.js\");\nvar import_utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar import_Player = __toESM(__webpack_require__(/*! ./Player */ \"(app-pages-browser)/./node_modules/react-player/lazy/Player.js\"));\nconst Preview = (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerPreview */ \"reactPlayerPreview\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Preview */ \"(app-pages-browser)/./node_modules/react-player/lazy/Preview.js\", 23)));\n_c = Preview;\nconst IS_BROWSER =  true && window.document && typeof document !== \"undefined\";\nconst IS_GLOBAL = typeof __webpack_require__.g !== \"undefined\" && __webpack_require__.g.window && __webpack_require__.g.window.document;\nconst SUPPORTED_PROPS = Object.keys(import_props.propTypes);\nconst UniversalSuspense = IS_BROWSER || IS_GLOBAL ? import_react.Suspense : ()=>null;\nconst customPlayers = [];\nconst createReactPlayer = (players, fallback)=>{\n    var _a;\n    return _a = class extends import_react.Component {\n        shouldComponentUpdate(nextProps, nextState) {\n            return !(0, import_react_fast_compare.default)(this.props, nextProps) || !(0, import_react_fast_compare.default)(this.state, nextState);\n        }\n        componentDidUpdate(prevProps) {\n            const { light } = this.props;\n            if (!prevProps.light && light) {\n                this.setState({\n                    showPreview: true\n                });\n            }\n            if (prevProps.light && !light) {\n                this.setState({\n                    showPreview: false\n                });\n            }\n        }\n        renderPreview(url) {\n            if (!url) return null;\n            const { light, playIcon, previewTabIndex, oEmbedUrl, previewAriaLabel } = this.props;\n            return /* @__PURE__ */ import_react.default.createElement(Preview, {\n                url,\n                light,\n                playIcon,\n                previewTabIndex,\n                previewAriaLabel,\n                oEmbedUrl,\n                onClick: this.handleClickPreview\n            });\n        }\n        render() {\n            const { url, style, width, height, fallback: fallback2, wrapper: Wrapper } = this.props;\n            const { showPreview } = this.state;\n            const attributes = this.getAttributes(url);\n            const wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : void 0;\n            return /* @__PURE__ */ import_react.default.createElement(Wrapper, {\n                ref: wrapperRef,\n                style: {\n                    ...style,\n                    width,\n                    height\n                },\n                ...attributes\n            }, /* @__PURE__ */ import_react.default.createElement(UniversalSuspense, {\n                fallback: fallback2\n            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n        }\n        constructor(){\n            var _this;\n            super(...arguments), _this = this;\n            __publicField(this, \"state\", {\n                showPreview: !!this.props.light\n            });\n            // Use references, as refs is used by React\n            __publicField(this, \"references\", {\n                wrapper: (wrapper)=>{\n                    this.wrapper = wrapper;\n                },\n                player: (player)=>{\n                    this.player = player;\n                }\n            });\n            __publicField(this, \"handleClickPreview\", (e)=>{\n                this.setState({\n                    showPreview: false\n                });\n                this.props.onClickPreview(e);\n            });\n            __publicField(this, \"showPreview\", ()=>{\n                this.setState({\n                    showPreview: true\n                });\n            });\n            __publicField(this, \"getDuration\", ()=>{\n                if (!this.player) return null;\n                return this.player.getDuration();\n            });\n            __publicField(this, \"getCurrentTime\", ()=>{\n                if (!this.player) return null;\n                return this.player.getCurrentTime();\n            });\n            __publicField(this, \"getSecondsLoaded\", ()=>{\n                if (!this.player) return null;\n                return this.player.getSecondsLoaded();\n            });\n            __publicField(this, \"getInternalPlayer\", function() {\n                let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"player\";\n                if (!_this.player) return null;\n                return _this.player.getInternalPlayer(key);\n            });\n            __publicField(this, \"seekTo\", (fraction, type, keepPlaying)=>{\n                if (!this.player) return null;\n                this.player.seekTo(fraction, type, keepPlaying);\n            });\n            __publicField(this, \"handleReady\", ()=>{\n                this.props.onReady(this);\n            });\n            __publicField(this, \"getActivePlayer\", (0, import_memoize_one.default)((url)=>{\n                for (const player of [\n                    ...customPlayers,\n                    ...players\n                ]){\n                    if (player.canPlay(url)) {\n                        return player;\n                    }\n                }\n                if (fallback) {\n                    return fallback;\n                }\n                return null;\n            }));\n            __publicField(this, \"getConfig\", (0, import_memoize_one.default)((url, key)=>{\n                const { config } = this.props;\n                return import_deepmerge.default.all([\n                    import_props.defaultProps.config,\n                    import_props.defaultProps.config[key] || {},\n                    config,\n                    config[key] || {}\n                ]);\n            }));\n            __publicField(this, \"getAttributes\", (0, import_memoize_one.default)((url)=>{\n                return (0, import_utils.omit)(this.props, SUPPORTED_PROPS);\n            }));\n            __publicField(this, \"renderActivePlayer\", (url)=>{\n                if (!url) return null;\n                const player = this.getActivePlayer(url);\n                if (!player) return null;\n                const config = this.getConfig(url, player.key);\n                return /* @__PURE__ */ import_react.default.createElement(import_Player.default, {\n                    ...this.props,\n                    key: player.key,\n                    ref: this.references.player,\n                    config,\n                    activePlayer: player.lazyPlayer || player,\n                    onReady: this.handleReady\n                });\n            });\n        }\n    }, __publicField(_a, \"displayName\", \"ReactPlayer\"), __publicField(_a, \"propTypes\", import_props.propTypes), __publicField(_a, \"defaultProps\", import_props.defaultProps), __publicField(_a, \"addCustomPlayer\", (player)=>{\n        customPlayers.push(player);\n    }), __publicField(_a, \"removeCustomPlayers\", ()=>{\n        customPlayers.length = 0;\n    }), __publicField(_a, \"canPlay\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canPlay(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), __publicField(_a, \"canEnablePIP\", (url)=>{\n        for (const Player2 of [\n            ...customPlayers,\n            ...players\n        ]){\n            if (Player2.canEnablePIP && Player2.canEnablePIP(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _a;\n};\nvar _c;\n$RefreshReg$(_c, \"Preview\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/ReactPlayer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/index.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lazy/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar src_exports = {};\n__export(src_exports, {\n    default: ()=>src_default\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_players = __toESM(__webpack_require__(/*! ./players */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/index.js\"));\nvar import_ReactPlayer = __webpack_require__(/*! ./ReactPlayer */ \"(app-pages-browser)/./node_modules/react-player/lazy/ReactPlayer.js\");\nconst fallback = import_players.default[import_players.default.length - 1];\nvar src_default = (0, import_ReactPlayer.createReactPlayer)(import_players.default, fallback);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGF6eS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsV0FBV0MsT0FBT0MsTUFBTTtBQUM1QixJQUFJQyxZQUFZRixPQUFPRyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkosT0FBT0ssd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQk4sT0FBT08sbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVSLE9BQU9TLGNBQWM7QUFDeEMsSUFBSUMsZUFBZVYsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFdBQVcsQ0FBQ0MsUUFBUUM7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmYixVQUFVWSxRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9sQixrQkFBa0JlLE1BQ2hDLElBQUksQ0FBQ1gsYUFBYWUsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q3BCLFVBQVVrQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT25CLGlCQUFpQmlCLE1BQU1HLElBQUcsS0FBTUQsS0FBS0wsVUFBVTtRQUFDO0lBQ3RIO0lBQ0EsT0FBT0U7QUFDVDtBQUNBLElBQUlNLFVBQVUsQ0FBQ0MsS0FBS0MsWUFBWWQsU0FBWUEsQ0FBQUEsU0FBU2EsT0FBTyxPQUFPNUIsU0FBU1MsYUFBYW1CLFFBQVEsQ0FBQyxHQUFHUixZQUNuRyxzRUFBc0U7SUFDdEUsaUVBQWlFO0lBQ2pFLHNFQUFzRTtJQUN0RSxxRUFBcUU7SUFDckVTLGNBQWMsQ0FBQ0QsT0FBTyxDQUFDQSxJQUFJRSxVQUFVLEdBQUczQixVQUFVWSxRQUFRLFdBQVc7UUFBRWdCLE9BQU9IO1FBQUtULFlBQVk7SUFBSyxLQUFLSixRQUN6R2EsSUFDRjtBQUNBLElBQUlJLGVBQWUsQ0FBQ0osTUFBUVIsWUFBWWpCLFVBQVUsQ0FBQyxHQUFHLGNBQWM7UUFBRTRCLE9BQU87SUFBSyxJQUFJSDtBQUN0RixJQUFJSyxjQUFjLENBQUM7QUFDbkJuQixTQUFTbUIsYUFBYTtJQUNwQkMsU0FBUyxJQUFNQztBQUNqQjtBQUNBQyxPQUFPQyxPQUFPLEdBQUdMLGFBQWFDO0FBQzlCLElBQUlLLGlCQUFpQlgsUUFBUVksbUJBQU9BLENBQUMsd0ZBQVc7QUFDaEQsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQywwRkFBZTtBQUNoRCxNQUFNRSxXQUFXSCxlQUFlSixPQUFPLENBQUNJLGVBQWVKLE9BQU8sQ0FBQ1EsTUFBTSxHQUFHLEVBQUU7QUFDMUUsSUFBSVAsY0FBYyxDQUFDLEdBQUdLLG1CQUFtQkcsaUJBQWlCLEVBQUVMLGVBQWVKLE9BQU8sRUFBRU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9sYXp5L2luZGV4LmpzPzQxMWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgZGVmYXVsdDogKCkgPT4gc3JjX2RlZmF1bHRcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xudmFyIGltcG9ydF9wbGF5ZXJzID0gX190b0VTTShyZXF1aXJlKFwiLi9wbGF5ZXJzXCIpKTtcbnZhciBpbXBvcnRfUmVhY3RQbGF5ZXIgPSByZXF1aXJlKFwiLi9SZWFjdFBsYXllclwiKTtcbmNvbnN0IGZhbGxiYWNrID0gaW1wb3J0X3BsYXllcnMuZGVmYXVsdFtpbXBvcnRfcGxheWVycy5kZWZhdWx0Lmxlbmd0aCAtIDFdO1xudmFyIHNyY19kZWZhdWx0ID0gKDAsIGltcG9ydF9SZWFjdFBsYXllci5jcmVhdGVSZWFjdFBsYXllcikoaW1wb3J0X3BsYXllcnMuZGVmYXVsdCwgZmFsbGJhY2spO1xuIl0sIm5hbWVzIjpbIl9fY3JlYXRlIiwiT2JqZWN0IiwiY3JlYXRlIiwiX19kZWZQcm9wIiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19nZXRQcm90b09mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0VTTSIsIm1vZCIsImlzTm9kZU1vZGUiLCJfX2VzTW9kdWxlIiwidmFsdWUiLCJfX3RvQ29tbW9uSlMiLCJzcmNfZXhwb3J0cyIsImRlZmF1bHQiLCJzcmNfZGVmYXVsdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbXBvcnRfcGxheWVycyIsInJlcXVpcmUiLCJpbXBvcnRfUmVhY3RQbGF5ZXIiLCJmYWxsYmFjayIsImxlbmd0aCIsImNyZWF0ZVJlYWN0UGxheWVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/patterns.js":
/*!****************************************************!*\
  !*** ./node_modules/react-player/lazy/patterns.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar patterns_exports = {};\n__export(patterns_exports, {\n    AUDIO_EXTENSIONS: ()=>AUDIO_EXTENSIONS,\n    DASH_EXTENSIONS: ()=>DASH_EXTENSIONS,\n    FLV_EXTENSIONS: ()=>FLV_EXTENSIONS,\n    HLS_EXTENSIONS: ()=>HLS_EXTENSIONS,\n    MATCH_URL_DAILYMOTION: ()=>MATCH_URL_DAILYMOTION,\n    MATCH_URL_FACEBOOK: ()=>MATCH_URL_FACEBOOK,\n    MATCH_URL_FACEBOOK_WATCH: ()=>MATCH_URL_FACEBOOK_WATCH,\n    MATCH_URL_KALTURA: ()=>MATCH_URL_KALTURA,\n    MATCH_URL_MIXCLOUD: ()=>MATCH_URL_MIXCLOUD,\n    MATCH_URL_MUX: ()=>MATCH_URL_MUX,\n    MATCH_URL_SOUNDCLOUD: ()=>MATCH_URL_SOUNDCLOUD,\n    MATCH_URL_STREAMABLE: ()=>MATCH_URL_STREAMABLE,\n    MATCH_URL_TWITCH_CHANNEL: ()=>MATCH_URL_TWITCH_CHANNEL,\n    MATCH_URL_TWITCH_VIDEO: ()=>MATCH_URL_TWITCH_VIDEO,\n    MATCH_URL_VIDYARD: ()=>MATCH_URL_VIDYARD,\n    MATCH_URL_VIMEO: ()=>MATCH_URL_VIMEO,\n    MATCH_URL_WISTIA: ()=>MATCH_URL_WISTIA,\n    MATCH_URL_YOUTUBE: ()=>MATCH_URL_YOUTUBE,\n    VIDEO_EXTENSIONS: ()=>VIDEO_EXTENSIONS,\n    canPlay: ()=>canPlay\n});\nmodule.exports = __toCommonJS(patterns_exports);\nvar import_utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nconst MATCH_URL_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie|education)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//;\nconst MATCH_URL_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nconst MATCH_URL_VIMEO = /vimeo\\.com\\/(?!progressive_redirect).+/;\nconst MATCH_URL_MUX = /stream\\.mux\\.com\\/(?!\\w+\\.m3u8)(\\w+)/;\nconst MATCH_URL_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nconst MATCH_URL_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/;\nconst MATCH_URL_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/;\nconst MATCH_URL_WISTIA = /(?:wistia\\.(?:com|net)|wi\\.st)\\/(?:medias|embed)\\/(?:iframe\\/)?([^?]+)/;\nconst MATCH_URL_TWITCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nconst MATCH_URL_TWITCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nconst MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?(?:[\\w.#_-]+)?/;\nconst MATCH_URL_MIXCLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nconst MATCH_URL_VIDYARD = /vidyard.com\\/(?:watch\\/)?([a-zA-Z0-9-_]+)/;\nconst MATCH_URL_KALTURA = /^https?:\\/\\/[a-zA-Z]+\\.kaltura.(com|org)\\/p\\/([0-9]+)\\/sp\\/([0-9]+)00\\/embedIframeJs\\/uiconf_id\\/([0-9]+)\\/partner_id\\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;\nconst AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nconst VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nconst HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nconst DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nconst FLV_EXTENSIONS = /\\.(flv)($|\\?)/i;\nconst canPlayFile = (url)=>{\n    if (url instanceof Array) {\n        for (const item of url){\n            if (typeof item === \"string\" && canPlayFile(item)) {\n                return true;\n            }\n            if (canPlayFile(item.src)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if ((0, import_utils.isMediaStream)(url) || (0, import_utils.isBlobUrl)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);\n};\nconst canPlay = {\n    youtube: (url)=>{\n        if (url instanceof Array) {\n            return url.every((item)=>MATCH_URL_YOUTUBE.test(item));\n        }\n        return MATCH_URL_YOUTUBE.test(url);\n    },\n    soundcloud: (url)=>MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url),\n    vimeo: (url)=>MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),\n    mux: (url)=>MATCH_URL_MUX.test(url),\n    facebook: (url)=>MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url),\n    streamable: (url)=>MATCH_URL_STREAMABLE.test(url),\n    wistia: (url)=>MATCH_URL_WISTIA.test(url),\n    twitch: (url)=>MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url),\n    dailymotion: (url)=>MATCH_URL_DAILYMOTION.test(url),\n    mixcloud: (url)=>MATCH_URL_MIXCLOUD.test(url),\n    vidyard: (url)=>MATCH_URL_VIDYARD.test(url),\n    kaltura: (url)=>MATCH_URL_KALTURA.test(url),\n    file: canPlayFile\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar players_exports = {};\n__export(players_exports, {\n    default: ()=>players_default\n});\nmodule.exports = __toCommonJS(players_exports);\nvar import_utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nvar players_default = [\n    {\n        key: \"youtube\",\n        name: \"YouTube\",\n        canPlay: import_patterns.canPlay.youtube,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerYouTube */ \"reactPlayerYouTube\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./YouTube */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/YouTube.js\", 23)))\n    },\n    {\n        key: \"soundcloud\",\n        name: \"SoundCloud\",\n        canPlay: import_patterns.canPlay.soundcloud,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerSoundCloud */ \"reactPlayerSoundCloud\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./SoundCloud */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/SoundCloud.js\", 23)))\n    },\n    {\n        key: \"vimeo\",\n        name: \"Vimeo\",\n        canPlay: import_patterns.canPlay.vimeo,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerVimeo */ \"reactPlayerVimeo\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Vimeo */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Vimeo.js\", 23)))\n    },\n    {\n        key: \"mux\",\n        name: \"Mux\",\n        canPlay: import_patterns.canPlay.mux,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerMux */ \"reactPlayerMux\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Mux */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Mux.js\", 23)))\n    },\n    {\n        key: \"facebook\",\n        name: \"Facebook\",\n        canPlay: import_patterns.canPlay.facebook,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerFacebook */ \"reactPlayerFacebook\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Facebook */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Facebook.js\", 23)))\n    },\n    {\n        key: \"streamable\",\n        name: \"Streamable\",\n        canPlay: import_patterns.canPlay.streamable,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerStreamable */ \"reactPlayerStreamable\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Streamable */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Streamable.js\", 23)))\n    },\n    {\n        key: \"wistia\",\n        name: \"Wistia\",\n        canPlay: import_patterns.canPlay.wistia,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerWistia */ \"reactPlayerWistia\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Wistia */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Wistia.js\", 23)))\n    },\n    {\n        key: \"twitch\",\n        name: \"Twitch\",\n        canPlay: import_patterns.canPlay.twitch,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerTwitch */ \"reactPlayerTwitch\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Twitch */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Twitch.js\", 23)))\n    },\n    {\n        key: \"dailymotion\",\n        name: \"DailyMotion\",\n        canPlay: import_patterns.canPlay.dailymotion,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerDailyMotion */ \"reactPlayerDailyMotion\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./DailyMotion */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/DailyMotion.js\", 23)))\n    },\n    {\n        key: \"mixcloud\",\n        name: \"Mixcloud\",\n        canPlay: import_patterns.canPlay.mixcloud,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerMixcloud */ \"reactPlayerMixcloud\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Mixcloud */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Mixcloud.js\", 23)))\n    },\n    {\n        key: \"vidyard\",\n        name: \"Vidyard\",\n        canPlay: import_patterns.canPlay.vidyard,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerVidyard */ \"reactPlayerVidyard\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Vidyard */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Vidyard.js\", 23)))\n    },\n    {\n        key: \"kaltura\",\n        name: \"Kaltura\",\n        canPlay: import_patterns.canPlay.kaltura,\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerKaltura */ \"reactPlayerKaltura\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./Kaltura */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/Kaltura.js\", 23)))\n    },\n    {\n        key: \"file\",\n        name: \"FilePlayer\",\n        canPlay: import_patterns.canPlay.file,\n        canEnablePIP: (url)=>{\n            return import_patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, import_utils.supportsWebKitPresentationMode)()) && !import_patterns.AUDIO_EXTENSIONS.test(url);\n        },\n        lazyPlayer: (0, import_utils.lazy)(()=>__webpack_require__.e(/*! import() | reactPlayerFilePlayer */ \"reactPlayerFilePlayer\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./FilePlayer */ \"(app-pages-browser)/./node_modules/react-player/lazy/players/FilePlayer.js\", 23)))\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/props.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lazy/props.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar props_exports = {};\n__export(props_exports, {\n    defaultProps: ()=>defaultProps,\n    propTypes: ()=>propTypes\n});\nmodule.exports = __toCommonJS(props_exports);\nvar import_prop_types = __toESM(__webpack_require__(/*! prop-types */ \"(app-pages-browser)/./node_modules/prop-types/index.js\"));\nconst { string, bool, number, array, oneOfType, shape, object, func, node } = import_prop_types.default;\nconst propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    stopOnUnmount: bool,\n    light: oneOfType([\n        bool,\n        string,\n        object\n    ]),\n    playIcon: node,\n    previewTabIndex: number,\n    previewAriaLabel: string,\n    fallback: node,\n    oEmbedUrl: string,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            onUnstarted: func\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string,\n            attributes: object\n        }),\n        dailymotion: shape({\n            params: object\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            title: string\n        }),\n        mux: shape({\n            attributes: object,\n            version: string\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceSafariHLS: bool,\n            forceDisableHls: bool,\n            forceDASH: bool,\n            forceFLV: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string,\n            flvVersion: string\n        }),\n        wistia: shape({\n            options: object,\n            playerId: string,\n            customControls: array\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        }),\n        vidyard: shape({\n            options: object\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onPlaybackRateChange: func,\n    onPlaybackQualityChange: func,\n    onProgress: func,\n    onClickPreview: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nconst noop = ()=>{};\nconst defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1e3,\n    playsinline: false,\n    pip: false,\n    stopOnUnmount: true,\n    light: false,\n    fallback: null,\n    wrapper: \"div\",\n    previewTabIndex: 0,\n    previewAriaLabel: \"\",\n    oEmbedUrl: \"https://noembed.com/embed?url={url}\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            onUnstarted: noop\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null,\n            attributes: {}\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            }\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            title: null\n        },\n        mux: {\n            attributes: {},\n            version: \"2\"\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            forceFLV: false,\n            hlsOptions: {},\n            hlsVersion: \"1.1.4\",\n            dashVersion: \"3.1.3\",\n            flvVersion: \"1.5.0\",\n            forceDisableHls: false\n        },\n        wistia: {\n            options: {},\n            playerId: null,\n            customControls: null\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        },\n        vidyard: {\n            options: {}\n        }\n    },\n    onReady: noop,\n    onStart: noop,\n    onPlay: noop,\n    onPause: noop,\n    onBuffer: noop,\n    onBufferEnd: noop,\n    onEnded: noop,\n    onError: noop,\n    onDuration: noop,\n    onSeek: noop,\n    onPlaybackRateChange: noop,\n    onPlaybackQualityChange: noop,\n    onProgress: noop,\n    onClickPreview: noop,\n    onEnablePIP: noop,\n    onDisablePIP: noop\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/props.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lazy/utils.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar utils_exports = {};\n__export(utils_exports, {\n    callPlayer: ()=>callPlayer,\n    getConfig: ()=>getConfig,\n    getSDK: ()=>getSDK,\n    isBlobUrl: ()=>isBlobUrl,\n    isMediaStream: ()=>isMediaStream,\n    lazy: ()=>lazy,\n    omit: ()=>omit,\n    parseEndTime: ()=>parseEndTime,\n    parseStartTime: ()=>parseStartTime,\n    queryString: ()=>queryString,\n    randomString: ()=>randomString,\n    supportsWebKitPresentationMode: ()=>supportsWebKitPresentationMode\n});\nmodule.exports = __toCommonJS(utils_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_load_script = __toESM(__webpack_require__(/*! load-script */ \"(app-pages-browser)/./node_modules/load-script/index.js\"));\nvar import_deepmerge = __toESM(__webpack_require__(/*! deepmerge */ \"(app-pages-browser)/./node_modules/deepmerge/dist/cjs.js\"));\nconst lazy = (componentImportFn)=>import_react.default.lazy(async ()=>{\n        const obj = await componentImportFn();\n        return typeof obj.default === \"function\" ? obj : obj.default;\n    });\nconst MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nconst MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nconst MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nconst MATCH_NUMERIC = /^\\d+$/;\nfunction parseTimeParam(url, pattern) {\n    if (url instanceof Array) {\n        return void 0;\n    }\n    const match = url.match(pattern);\n    if (match) {\n        const stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return void 0;\n}\nfunction parseTimeString(stamp) {\n    let seconds = 0;\n    let array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        const [, count, period] = array;\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n}\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map((key)=>\"\".concat(key, \"=\").concat(object[key])).join(\"&\");\n}\nfunction getGlobal(key) {\n    if (window[key]) {\n        return window[key];\n    }\n    if (window.exports && window.exports[key]) {\n        return window.exports[key];\n    }\n    if (window.module && window.module.exports && window.module.exports[key]) {\n        return window.module.exports[key];\n    }\n    return null;\n}\nconst requests = {};\nconst getSDK = enableStubOn(function getSDK2(url, sdkGlobal) {\n    let sdkReady = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, isLoaded = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ()=>true, fetchScript = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : import_load_script.default;\n    const existingGlobal = getGlobal(sdkGlobal);\n    if (existingGlobal && isLoaded(existingGlobal)) {\n        return Promise.resolve(existingGlobal);\n    }\n    return new Promise((resolve, reject)=>{\n        if (requests[url]) {\n            requests[url].push({\n                resolve,\n                reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve,\n                reject\n            }\n        ];\n        const onLoaded = (sdk)=>{\n            requests[url].forEach((request)=>request.resolve(sdk));\n        };\n        if (sdkReady) {\n            const previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(getGlobal(sdkGlobal));\n            };\n        }\n        fetchScript(url, (err)=>{\n            if (err) {\n                requests[url].forEach((request)=>request.reject(err));\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(getGlobal(sdkGlobal));\n            }\n        });\n    });\n});\nfunction getConfig(props, defaultProps) {\n    return (0, import_deepmerge.default)(defaultProps.config, props.config);\n}\nfunction omit(object) {\n    for(var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        arrays[_key - 1] = arguments[_key];\n    }\n    const omitKeys = [].concat(...arrays);\n    const output = {};\n    const keys = Object.keys(object);\n    for (const key of keys){\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (!this.player || !this.player[method]) {\n        let message = \"ReactPlayer: \".concat(this.constructor.displayName, \" player could not call %c\").concat(method, \"%c – \");\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    return this.player[method](...args);\n}\nfunction isMediaStream(url) {\n    return  true && typeof window.MediaStream !== \"undefined\" && url instanceof window.MediaStream;\n}\nfunction isBlobUrl(url) {\n    return /^blob:/.test(url);\n}\nfunction supportsWebKitPresentationMode() {\n    let video = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document.createElement(\"video\");\n    const notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && notMobile;\n}\nfunction enableStubOn(fn) {\n    if (false) {}\n    return fn;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/utils.js\n"));

/***/ })

}]);