"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerMux"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/Mux.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Mux.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Mux_exports = {};\n__export(Mux_exports, {\n    default: ()=>Mux\n});\nmodule.exports = __toCommonJS(Mux_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nconst SDK_URL = \"https://cdn.jsdelivr.net/npm/@mux/mux-player@VERSION/dist/mux-player.mjs\";\nclass Mux extends import_react.Component {\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n        this.addListeners(this.player);\n        const playbackId = this.getPlaybackId(this.props.url);\n        if (playbackId) {\n            this.player.playbackId = playbackId;\n        }\n    }\n    componentWillUnmount() {\n        this.player.playbackId = null;\n        this.removeListeners(this.player);\n    }\n    addListeners(player) {\n        const { playsinline } = this.props;\n        player.addEventListener(\"play\", this.onPlay);\n        player.addEventListener(\"waiting\", this.onBuffer);\n        player.addEventListener(\"playing\", this.onBufferEnd);\n        player.addEventListener(\"pause\", this.onPause);\n        player.addEventListener(\"seeked\", this.onSeek);\n        player.addEventListener(\"ended\", this.onEnded);\n        player.addEventListener(\"error\", this.onError);\n        player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n        player.addEventListener(\"canplay\", this.onReady);\n        if (playsinline) {\n            player.setAttribute(\"playsinline\", \"\");\n        }\n    }\n    removeListeners(player) {\n        player.removeEventListener(\"canplay\", this.onReady);\n        player.removeEventListener(\"play\", this.onPlay);\n        player.removeEventListener(\"waiting\", this.onBuffer);\n        player.removeEventListener(\"playing\", this.onBufferEnd);\n        player.removeEventListener(\"pause\", this.onPause);\n        player.removeEventListener(\"seeked\", this.onSeek);\n        player.removeEventListener(\"ended\", this.onEnded);\n        player.removeEventListener(\"error\", this.onError);\n        player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n        player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n        player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n        player.removeEventListener(\"canplay\", this.onReady);\n    }\n    async load(url) {\n        var _a;\n        const { onError, config } = this.props;\n        if (!((_a = globalThis.customElements) == null ? void 0 : _a.get(\"mux-player\"))) {\n            try {\n                const sdkUrl = SDK_URL.replace(\"VERSION\", config.version);\n                await import(/* webpackIgnore: true */ \"\".concat(sdkUrl));\n                this.props.onLoaded();\n            } catch (error) {\n                onError(error);\n            }\n        }\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        this.player.playbackId = id;\n    }\n    play() {\n        const promise = this.player.play();\n        if (promise) {\n            promise.catch(this.props.onError);\n        }\n    }\n    pause() {\n        this.player.pause();\n    }\n    stop() {\n        this.player.playbackId = null;\n    }\n    seekTo(seconds) {\n        let keepPlaying = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        this.player.currentTime = seconds;\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.player.volume = fraction;\n    }\n    enablePIP() {\n        if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n            this.player.requestPictureInPicture();\n        }\n    }\n    disablePIP() {\n        if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n            document.exitPictureInPicture();\n        }\n    }\n    setPlaybackRate(rate) {\n        try {\n            this.player.playbackRate = rate;\n        } catch (error) {\n            this.props.onError(error);\n        }\n    }\n    getDuration() {\n        if (!this.player) return null;\n        const { duration, seekable } = this.player;\n        if (duration === Infinity && seekable.length > 0) {\n            return seekable.end(seekable.length - 1);\n        }\n        return duration;\n    }\n    getCurrentTime() {\n        if (!this.player) return null;\n        return this.player.currentTime;\n    }\n    getSecondsLoaded() {\n        if (!this.player) return null;\n        const { buffered } = this.player;\n        if (buffered.length === 0) {\n            return 0;\n        }\n        const end = buffered.end(buffered.length - 1);\n        const duration = this.getDuration();\n        if (end > duration) {\n            return duration;\n        }\n        return end;\n    }\n    getPlaybackId(url) {\n        const [, id] = url.match(import_patterns.MATCH_URL_MUX);\n        return id;\n    }\n    render() {\n        const { url, playing, loop, controls, muted, config, width, height } = this.props;\n        const style = {\n            width: width === \"auto\" ? width : \"100%\",\n            height: height === \"auto\" ? height : \"100%\"\n        };\n        if (controls === false) {\n            style[\"--controls\"] = \"none\";\n        }\n        return /* @__PURE__ */ import_react.default.createElement(\"mux-player\", {\n            ref: this.ref,\n            \"playback-id\": this.getPlaybackId(url),\n            style,\n            preload: \"auto\",\n            autoPlay: playing || void 0,\n            muted: muted ? \"\" : void 0,\n            loop: loop ? \"\" : void 0,\n            ...config.attributes\n        });\n    }\n    constructor(){\n        var _this;\n        super(...arguments), _this = this;\n        // Proxy methods to prevent listener leaks\n        __publicField(this, \"onReady\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onReady(...args);\n        });\n        __publicField(this, \"onPlay\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onPlay(...args);\n        });\n        __publicField(this, \"onBuffer\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onBuffer(...args);\n        });\n        __publicField(this, \"onBufferEnd\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onBufferEnd(...args);\n        });\n        __publicField(this, \"onPause\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onPause(...args);\n        });\n        __publicField(this, \"onEnded\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onEnded(...args);\n        });\n        __publicField(this, \"onError\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onError(...args);\n        });\n        __publicField(this, \"onPlayBackRateChange\", (event)=>this.props.onPlaybackRateChange(event.target.playbackRate));\n        __publicField(this, \"onEnablePIP\", function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return _this.props.onEnablePIP(...args);\n        });\n        __publicField(this, \"onSeek\", (e)=>{\n            this.props.onSeek(e.target.currentTime);\n        });\n        __publicField(this, \"onDurationChange\", ()=>{\n            const duration = this.getDuration();\n            this.props.onDuration(duration);\n        });\n        __publicField(this, \"mute\", ()=>{\n            this.player.muted = true;\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.player.muted = false;\n        });\n        __publicField(this, \"ref\", (player)=>{\n            this.player = player;\n        });\n    }\n}\n__publicField(Mux, \"displayName\", \"Mux\");\n__publicField(Mux, \"canPlay\", import_patterns.canPlay.mux);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/Mux.js\n"));

/***/ })

}]);