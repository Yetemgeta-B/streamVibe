"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerTwitch"],{

/***/ "(app-pages-browser)/./node_modules/react-player/lazy/players/Twitch.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lazy/players/Twitch.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar Twitch_exports = {};\n__export(Twitch_exports, {\n    default: ()=>Twitch\n});\nmodule.exports = __toCommonJS(Twitch_exports);\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nvar import_utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/react-player/lazy/utils.js\");\nvar import_patterns = __webpack_require__(/*! ../patterns */ \"(app-pages-browser)/./node_modules/react-player/lazy/patterns.js\");\nconst SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\nconst SDK_GLOBAL = \"Twitch\";\nconst PLAYER_ID_PREFIX = \"twitch-player-\";\nclass Twitch extends import_react.Component {\n    componentDidMount() {\n        this.props.onMount && this.props.onMount(this);\n    }\n    load(url, isReady) {\n        const { playsinline, onError, config, controls } = this.props;\n        const isChannel = import_patterns.MATCH_URL_TWITCH_CHANNEL.test(url);\n        const id = isChannel ? url.match(import_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(import_patterns.MATCH_URL_TWITCH_VIDEO)[1];\n        if (isReady) {\n            if (isChannel) {\n                this.player.setChannel(id);\n            } else {\n                this.player.setVideo(\"v\" + id);\n            }\n            return;\n        }\n        (0, import_utils.getSDK)(SDK_URL, SDK_GLOBAL).then((Twitch2)=>{\n            this.player = new Twitch2.Player(this.playerID, {\n                video: isChannel ? \"\" : id,\n                channel: isChannel ? id : \"\",\n                height: \"100%\",\n                width: \"100%\",\n                playsinline,\n                autoplay: this.props.playing,\n                muted: this.props.muted,\n                // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n                controls: isChannel ? true : controls,\n                time: (0, import_utils.parseStartTime)(url),\n                ...config.options\n            });\n            const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE, SEEK } = Twitch2.Player;\n            this.player.addEventListener(READY, this.props.onReady);\n            this.player.addEventListener(PLAYING, this.props.onPlay);\n            this.player.addEventListener(PAUSE, this.props.onPause);\n            this.player.addEventListener(ENDED, this.props.onEnded);\n            this.player.addEventListener(SEEK, this.props.onSeek);\n            this.player.addEventListener(ONLINE, this.props.onLoaded);\n            this.player.addEventListener(OFFLINE, this.props.onLoaded);\n        }, onError);\n    }\n    play() {\n        this.callPlayer(\"play\");\n    }\n    pause() {\n        this.callPlayer(\"pause\");\n    }\n    stop() {\n        this.callPlayer(\"pause\");\n    }\n    seekTo(seconds) {\n        let keepPlaying = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        this.callPlayer(\"seek\", seconds);\n        if (!keepPlaying) {\n            this.pause();\n        }\n    }\n    setVolume(fraction) {\n        this.callPlayer(\"setVolume\", fraction);\n    }\n    getDuration() {\n        return this.callPlayer(\"getDuration\");\n    }\n    getCurrentTime() {\n        return this.callPlayer(\"getCurrentTime\");\n    }\n    getSecondsLoaded() {\n        return null;\n    }\n    render() {\n        const style = {\n            width: \"100%\",\n            height: \"100%\"\n        };\n        return /* @__PURE__ */ import_react.default.createElement(\"div\", {\n            style,\n            id: this.playerID\n        });\n    }\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"callPlayer\", import_utils.callPlayer);\n        __publicField(this, \"playerID\", this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, import_utils.randomString)()));\n        __publicField(this, \"mute\", ()=>{\n            this.callPlayer(\"setMuted\", true);\n        });\n        __publicField(this, \"unmute\", ()=>{\n            this.callPlayer(\"setMuted\", false);\n        });\n    }\n}\n__publicField(Twitch, \"displayName\", \"Twitch\");\n__publicField(Twitch, \"canPlay\", import_patterns.canPlay.twitch);\n__publicField(Twitch, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-player/lazy/players/Twitch.js\n"));

/***/ })

}]);